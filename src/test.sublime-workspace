{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"node",
				"nodeName"
			],
			[
				"xml",
				"xmlTextReaderConstLocalName"
			],
			[
				"insta",
				"instance_string"
			],
			[
				"getTer",
				"getTerm"
			],
			[
				"x",
				"x_string"
			],
			[
				"set",
				"setPosition"
			],
			[
				"xmlText",
				"xmlTextReaderNodeType"
			],
			[
				"dire",
				"direction_string"
			],
			[
				"ter",
				"term_name"
			],
			[
				"to",
				"toDirection"
			],
			[
				"direc",
				"direction"
			],
			[
				"Direct",
				"Direction"
			],
			[
				"pro",
				"process"
			],
			[
				"ent",
				"entity"
			],
			[
				"res",
				"reset_n"
			],
			[
				"reg",
				"registre2"
			],
			[
				"std",
				"std_logic"
			],
			[
				"fi",
				"fifo_v2"
			],
			[
				"fif",
				"fifo_v2"
			],
			[
				"fifo",
				"fifo_v2"
			],
			[
				"re",
				"read_1"
			],
			[
				"wrt",
				"write_2"
			],
			[
				"read",
				"read_1"
			],
			[
				"wrti",
				"write_2"
			],
			[
				"write",
				"write_2"
			],
			[
				"fifo_v",
				"fifo_v1"
			],
			[
				"nom",
				"noms_instructions"
			],
			[
				"val",
				"valeurs_binaires"
			],
			[
				"vale",
				"valeur_binaire"
			],
			[
				"no",
				"nom_instruction"
			],
			[
				"inc",
				"include"
			],
			[
				"ins",
				"instruction_terminal_v"
			],
			[
				"inst",
				"instructions_arm"
			],
			[
				"str",
				"string_a_extraire"
			],
			[
				"ex",
				"extraction_mot_espace_virgule"
			],
			[
				"pos",
				"position_virgules"
			],
			[
				"vec",
				"vecteur"
			],
			[
				"reist",
				"registres_or_immediat"
			],
			[
				"indice",
				"indice_espace"
			],
			[
				"passa",
				"passage_espace"
			],
			[
				"va",
				"valeurs_binaires"
			],
			[
				"In",
				"Indentation"
			],
			[
				"exi",
				"test_existance"
			],
			[
				"getN",
				"getName"
			],
			[
				"term",
				"terms_"
			],
			[
				"in",
				"include"
			],
			[
				"ran",
				"rand_slv"
			],
			[
				"s",
				"shift_lsr"
			],
			[
				"sh",
				"shift_val"
			],
			[
				"shi",
				"shift_lsr"
			],
			[
				"sif",
				"shift_lsl"
			],
			[
				"c",
				"cout"
			],
			[
				"C",
				"C_out"
			],
			[
				"op2",
				"op2_add"
			],
			[
				"op",
				"op1_add"
			],
			[
				"std_",
				"std_logic_vector"
			],
			[
				"P",
				"PROCESS"
			],
			[
				"B",
				"B_sig"
			],
			[
				"S",
				"Std_Logic"
			],
			[
				"ENT",
				"ENTITY"
			],
			[
				"std_l",
				"std_logic_vector"
			],
			[
				"map",
				"map_sans_surcharge"
			],
			[
				"lis",
				"liste_de_mots"
			],
			[
				"ios",
				"iostream"
			],
			[
				"v",
				"vector"
			],
			[
				"ma",
				"main"
			],
			[
				"string",
				"string.h"
			],
			[
				"mot",
				"motCode"
			],
			[
				"co",
				"compteur"
			],
			[
				"sti",
				"stdio.h"
			],
			[
				"strin",
				"string.h"
			],
			[
				"stdin",
				"stdint.h"
			],
			[
				"ta",
				"tableau2"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Node.h",
			"settings":
			{
				"buffer_size": 1934,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKgEAAAAAAAAqQQAAAAAAAAAAAAAqQQAAAAAAAC3BAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKgEAAAAAAAAqAQAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					4,
					"left_delete",
					null,
					"BAAAALUEAAAAAAAAtQQAAAAAAAACAAAAICCzBAAAAAAAALMEAAAAAAAAAgAAACAgsQQAAAAAAACxBAAAAAAAAAIAAAAgIK8EAAAAAAAArwQAAAAAAAACAAAAICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALcEAAAAAAAAtwQAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "static"
					},
					"BgAAAK8EAAAAAAAAsAQAAAAAAAAAAAAAsAQAAAAAAACxBAAAAAAAAAAAAACxBAAAAAAAALIEAAAAAAAAAAAAALIEAAAAAAAAswQAAAAAAAAAAAAAswQAAAAAAAC0BAAAAAAAAAAAAAC0BAAAAAAAALUEAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK8EAAAAAAAArwQAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " bool"
					},
					"BQAAALUEAAAAAAAAtgQAAAAAAAAAAAAAtgQAAAAAAAC3BAAAAAAAAAAAAAC3BAAAAAAAALgEAAAAAAAAAAAAALgEAAAAAAAAuQQAAAAAAAAAAAAAuQQAAAAAAAC6BAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALUEAAAAAAAAtQQAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAALYEAAAAAAAAtwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALYEAAAAAAAAtgQAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAALsEAAAAAAAAvQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALsEAAAAAAAAuwQAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "\tfrom"
					},
					"BQAAAL0EAAAAAAAAvwQAAAAAAAAAAAAAvwQAAAAAAADABAAAAAAAAAAAAADABAAAAAAAAMEEAAAAAAAAAAAAAMEEAAAAAAAAwgQAAAAAAAAAAAAAwgQAAAAAAADDBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL0EAAAAAAAAvQQAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"insert_completion",
					{
						"completion": "fromXml",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "fromXml"
					},
					"AgAAAL8EAAAAAAAAvwQAAAAAAAAEAAAAZnJvbb8EAAAAAAAAxgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMEAAAAAAAAwwQAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAMYEAAAAAAAAxwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMYEAAAAAAAAxgQAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAMcEAAAAAAAAyQQAAAAAAAAAAAAAyQQAAAAAAADLBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMcEAAAAAAAAxwQAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMsEAAAAAAAAzQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMsEAAAAAAAAywQAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "NET"
					},
					"AwAAAMwEAAAAAAAAzQQAAAAAAAAAAAAAzQQAAAAAAADOBAAAAAAAAAAAAADOBAAAAAAAAM8EAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMwEAAAAAAAAzAQAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					2,
					"left_delete",
					null,
					"AgAAAM4EAAAAAAAAzgQAAAAAAAABAAAAVM0EAAAAAAAAzQQAAAAAAAABAAAARQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM8EAAAAAAAAzwQAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "et*,"
					},
					"BAAAAM0EAAAAAAAAzgQAAAAAAAAAAAAAzgQAAAAAAADPBAAAAAAAAAAAAADPBAAAAAAAANAEAAAAAAAAAAAAANAEAAAAAAAA0QQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0EAAAAAAAAzQQAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " x"
					},
					"AgAAANEEAAAAAAAA0gQAAAAAAAAAAAAA0gQAAAAAAADTBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANEEAAAAAAAA0QQAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "ml"
					},
					"AgAAANMEAAAAAAAA1AQAAAAAAAAAAAAA1AQAAAAAAADVBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANMEAAAAAAAA0wQAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert_completion",
					{
						"completion": "xmlTextReaderPtr",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "xmlTextReaderPtr"
					},
					"AgAAANIEAAAAAAAA0gQAAAAAAAADAAAAeG1s0gQAAAAAAADiBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUEAAAAAAAA1QQAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " ;"
					},
					"AgAAAOMEAAAAAAAA5AQAAAAAAAAAAAAA5AQAAAAAAADlBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMEAAAAAAAA4wQAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "Term.h",
			"settings":
			{
				"buffer_size": 3885,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Cell.cpp",
			"settings":
			{
				"buffer_size": 12218,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					22,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO0LAAAAAAAA9QsAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADbLwAALy8gLSotIGV4cGxpY2l0LWJ1ZmZlci1uYW1lOiAiQ2VsbC5jcHA8TTEtTU9CSi80LTU+IiAtKi0KCiNpbmNsdWRlICA8Y3N0ZGxpYj4KI2luY2x1ZGUgICJDZWxsLmgiCgojaW5jbHVkZSAiSW5zdGFuY2UuaCIKI2luY2x1ZGUgIlRlcm0uaCIKI2luY2x1ZGUgIk5ldC5oIgojaW5jbHVkZSAiUG9pbnQuaCIKI2luY2x1ZGUgIkluZGVudGF0aW9uLmgiCiNpbmNsdWRlICJYbWxVdGlsLmgiCgpuYW1lc3BhY2UgTmV0bGlzdCB7CgogIHVzaW5nIG5hbWVzcGFjZSBzdGQ7CgoKICB2ZWN0b3I8Q2VsbCo+ICBDZWxsOjpjZWxsc187CgoKICBDZWxsKiBDZWxsOjpmaW5kICggY29uc3Qgc3RyaW5nJiBuYW1lICkKICB7CiAgICBmb3IgKCB2ZWN0b3I8Q2VsbCo+OjppdGVyYXRvciBpY2VsbD1jZWxsc18uYmVnaW4oKSA7IGljZWxsICE9IGNlbGxzXy5lbmQoKSA7ICsraWNlbGwgKSB7CiAgICAgIGlmICgoKmljZWxsKS0+Z2V0TmFtZSgpID09IG5hbWUpIHJldHVybiAqaWNlbGw7CiAgICB9CiAgICByZXR1cm4gTlVMTDsKICB9CgoKICBDZWxsOjpDZWxsICggY29uc3Qgc3RyaW5nJiBuYW1lICkKICAgIDogbmFtZV8gICAgIChuYW1lKSAKICAgICwgdGVybXNfICAgICgpCiAgICAsIGluc3RhbmNlc18oKQogICAgLCBuZXRzXyAgICAgKCkKICAgICwgbWF4TmV0SWRzXygwKQogIHsKICAgIGlmIChmaW5kKG5hbWUpKSB7CiAgICAgIGNlcnIgPDwgIltFUlJPUl0gQXR0ZW1wdCB0byBjcmVhdGUgZHVwbGljYXRlIG9mIENlbGwgPCIgPDwgbmFtZSA8PCAiPi5cbiIKICAgICAgICAgICA8PCAiICAgICAgICBBYm9ydGluZy4uLiIgPDwgZW5kbDsKICAgICAgZXhpdCggMSApOwogICAgfQogICAgY2VsbHNfLnB1c2hfYmFjayggdGhpcyApOwogIH0KCgogIENlbGw6On5DZWxsICgpCiAgewogICAgZm9yICggdmVjdG9yPENlbGwqPjo6aXRlcmF0b3IgaWNlbGw9Y2VsbHNfLmJlZ2luKCkgOyBpY2VsbCAhPSBjZWxsc18uZW5kKCkgOyArK2ljZWxsICkgewogICAgICBpZiAoKmljZWxsID09IHRoaXMpIHsKICAgICAgICBjZWxsc18uZXJhc2UoIGljZWxsICk7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KCiAgICB3aGlsZSAoIG5vdCBuZXRzXyAgICAgLmVtcHR5KCkgKSBkZWxldGUgKm5ldHNfICAgICAuYmVnaW4oKTsKICAgIHdoaWxlICggbm90IGluc3RhbmNlc18uZW1wdHkoKSApIGRlbGV0ZSAqaW5zdGFuY2VzXy5iZWdpbigpOwogICAgd2hpbGUgKCBub3QgdGVybXNfICAgIC5lbXB0eSgpICkgZGVsZXRlICp0ZXJtc18gICAgLmJlZ2luKCk7CiAgfQoKCiAgSW5zdGFuY2UqIENlbGw6OmdldEluc3RhbmNlICggY29uc3Qgc3RkOjpzdHJpbmcmIG5hbWUgKSBjb25zdAogIHsKICAgIGZvciAoIHZlY3RvcjxJbnN0YW5jZSo+Ojpjb25zdF9pdGVyYXRvciBpaW5zdD1pbnN0YW5jZXNfLmJlZ2luKCkgOyBpaW5zdCAhPSBpbnN0YW5jZXNfLmVuZCgpIDsgKytpaW5zdCApIHsKICAgICAgaWYgKCgqaWluc3QpLT5nZXROYW1lKCkgPT0gbmFtZSkgIHJldHVybiAqaWluc3Q7CiAgICB9CiAgICByZXR1cm4gTlVMTDsKICB9CgoKICBUZXJtKiBDZWxsOjpnZXRUZXJtICggY29uc3Qgc3RkOjpzdHJpbmcmIG5hbWUgKSBjb25zdAogIHsKICAgIGZvciAoIHZlY3RvcjxUZXJtKj46OmNvbnN0X2l0ZXJhdG9yIGl0ZXJtPXRlcm1zXy5iZWdpbigpIDsgaXRlcm0gIT0gdGVybXNfLmVuZCgpIDsgKytpdGVybSApIHsKICAgICAgaWYgKCgqaXRlcm0pLT5nZXROYW1lKCkgPT0gbmFtZSkgIHJldHVybiAqaXRlcm07CiAgICB9CiAgICByZXR1cm4gTlVMTDsKICB9CgoKICBOZXQqIENlbGw6OmdldE5ldCAoIGNvbnN0IHN0ZDo6c3RyaW5nJiBuYW1lICkgY29uc3QKICB7CiAgICBmb3IgKCB2ZWN0b3I8TmV0Kj46OmNvbnN0X2l0ZXJhdG9yIGluZXQ9bmV0c18uYmVnaW4oKSA7IGluZXQgIT0gbmV0c18uZW5kKCkgOyArK2luZXQgKSB7CiAgICAgIGlmICgoKmluZXQpLT5nZXROYW1lKCkgPT0gbmFtZSkgIHJldHVybiAqaW5ldDsKICAgIH0KICAgIHJldHVybiBOVUxMOwogIH0KCgogIHZvaWQgIENlbGw6OnNldE5hbWUgKCBjb25zdCBzdHJpbmcmIGNlbGxOYW1lICkKICB7CiAgICBpZiAoY2VsbE5hbWUgPT0gbmFtZV8pIHJldHVybjsKICAgIGlmIChmaW5kKGNlbGxOYW1lKSAhPSBOVUxMKSB7CiAgICAgIGNlcnIgPDwgIltFUlJPUl0gQ2VsbDo6c2V0TmFtZSgpIC0gTmV3IENlbGwgbmFtZSA8IiA8PCBjZWxsTmFtZSA8PCAiPiBhbHJlYWR5IGV4aXN0cy4iPDwgZW5kbDsKICAgICAgcmV0dXJuOwogICAgfQogICAgbmFtZV8gPSBjZWxsTmFtZTsKICB9CgoKICB2b2lkICBDZWxsOjphZGQgKCBJbnN0YW5jZSogaW5zdGFuY2UgKQogIHsKICAgIGlmIChnZXRJbnN0YW5jZShpbnN0YW5jZS0+Z2V0TmFtZSgpKSkgewogICAgICBjZXJyIDw8ICJbRVJST1JdIEF0dGVtcCB0byBhZGQgZHVwbGljYXRlZCBpbnN0YW5jZSA8IiA8PCBpbnN0YW5jZS0+Z2V0TmFtZSgpIDw8ICI+LiIgPDwgZW5kbDsKICAgICAgZXhpdCggMSApOwogICAgfQogICAgaW5zdGFuY2VzXy5wdXNoX2JhY2soIGluc3RhbmNlICk7CiAgfQoKCiAgdm9pZCAgQ2VsbDo6YWRkICggVGVybSogdGVybSApCiAgewogICAgaWYgKGdldFRlcm0odGVybS0+Z2V0TmFtZSgpKSkgewogICAgICBjZXJyIDw8ICJbRVJST1JdIEF0dGVtcCB0byBhZGQgZHVwbGljYXRlZCB0ZXJtaW5hbCA8IiA8PCB0ZXJtLT5nZXROYW1lKCkgPDwgIj4uIiA8PCBlbmRsOwogICAgICBleGl0KCAxICk7CiAgICB9CiAgICB0ZXJtc18ucHVzaF9iYWNrKCB0ZXJtICk7CiAgfQoKCiAgdm9pZCAgQ2VsbDo6YWRkICggTmV0KiBuZXQgKQogIHsKICAgIGlmIChnZXROZXQobmV0LT5nZXROYW1lKCkpKSB7CiAgICAgIGNlcnIgPDwgIltFUlJPUl0gQXR0ZW1wIHRvIGFkZCBkdXBsaWNhdGVkIE5ldCA8IiA8PCBuZXQtPmdldE5hbWUoKSA8PCAiPi4iIDw8IGVuZGw7CiAgICAgIGV4aXQoIDEgKTsKICAgIH0KICAgIG5ldHNfLnB1c2hfYmFjayggbmV0ICk7CiAgfQoKCiAgYm9vbCAgQ2VsbDo6Y29ubmVjdCAoIGNvbnN0IHN0cmluZyYgbmFtZSwgTmV0KiBuZXQgKQogIHsKICAgIFRlcm0qIHRlcm0gPSBnZXRUZXJtKCBuYW1lICk7CiAgICBpZiAodGVybSA9PSBOVUxMKSByZXR1cm4gZmFsc2U7CiAKICAgIHRlcm0tPnNldE5ldCggbmV0ICk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgoKICB2b2lkICBDZWxsOjpyZW1vdmUgKCBJbnN0YW5jZSogaW5zdGFuY2UgKQogIHsKICAgIGZvciAoIHZlY3RvcjxJbnN0YW5jZSo+OjppdGVyYXRvciBpaW5zdD1pbnN0YW5jZXNfLmJlZ2luKCkgOyBpaW5zdCAhPSBpbnN0YW5jZXNfLmVuZCgpIDsgKytpaW5zdCApIHsKICAgICAgaWYgKCppaW5zdCA9PSBpbnN0YW5jZSkgaW5zdGFuY2VzXy5lcmFzZSggaWluc3QgKTsKICAgIH0KICB9CgoKICB2b2lkICBDZWxsOjpyZW1vdmUgKCBUZXJtKiB0ZXJtICkKICB7CiAgICBmb3IgKCB2ZWN0b3I8VGVybSo+OjppdGVyYXRvciBpdGVybT10ZXJtc18uYmVnaW4oKSA7IGl0ZXJtICE9IHRlcm1zXy5lbmQoKSA7ICsraXRlcm0gKSB7CiAgICAgIGlmICgqaXRlcm0gPT0gdGVybSkgdGVybXNfLmVyYXNlKCBpdGVybSApOwogICAgfQogIH0KCgogIHZvaWQgIENlbGw6OnJlbW92ZSAoIE5ldCogbmV0ICkKICB7CiAgICBmb3IgKCB2ZWN0b3I8TmV0Kj46Oml0ZXJhdG9yIGluZXQ9bmV0c18uYmVnaW4oKSA7IGluZXQgIT0gbmV0c18uZW5kKCkgOyArK2luZXQgKSB7CiAgICAgIGlmICgqaW5ldCA9PSBuZXQpIG5ldHNfLmVyYXNlKCBpbmV0ICk7CiAgICB9CiAgfQoKCiAgdW5zaWduZWQgaW50IENlbGw6Om5ld05ldElkICgpCiAgeyByZXR1cm4gbWF4TmV0SWRzXysrOyB9CgogIC8qRHJpdmVycyBYTUwgOiovCgogIHZvaWQgQ2VsbDo6dG9YbWwob3N0cmVhbSYgb3MpIGNvbnN0CiAgewogICAgZXh0ZXJuIEluZGVudGF0aW9uIGluZGVudCA7CgogICAKCiAgICAvL2ludHJvZHVjdGlvbiBhZmZpY2hhZ2UgOiAKICAgIG9zPDwiPD94bWwgdmVyc2lvbj1cIjEuMFwiPz5cbiI7CiAgICAKICAgIC8vQ2VsbCA6CgogICAgb3M8PGluZGVudDw8IjxjZWxsIG5hbWU9XCIiPDx0aGlzLT5nZXROYW1lKCk8PCJcIj5cbiI7CiAgICBpbmRlbnQrKzsKICAgIC8vVGVybXMgOgoKICAgIG9zPDxpbmRlbnQ8PCI8dGVybXM+XG4iOwogICAgaW5kZW50Kys7IAogICAgZm9yKHNpemVfdCBpID0gMCA7IGkgPCB0ZXJtc18uc2l6ZSgpOyBpKyspCiAgICB7CiAgICAgIHRlcm1zX1tpXS0+dG9YbWwob3MpIDsKICAgIH0KICAgIGluZGVudC0tOwogICAgb3M8PGluZGVudDw8IjwvdGVybXM+XG4iOwoKICAgIC8vSW5zdGFuY2UKICAgIAogICAgb3M8PGluZGVudDw8IjxpbnN0YW5jZXM+XG4iOwogICAgaW5kZW50Kys7CiAgICBmb3Ioc2l6ZV90IGkgPSAwIDsgaSA8IGluc3RhbmNlc18uc2l6ZSgpOyBpKyspCiAgICB7CiAgICAgIGluc3RhbmNlc19baV0tPnRvWG1sKG9zKSA7CiAgICB9CiAgICBpbmRlbnQtLSA7CiAgICBvczw8aW5kZW50PDwiPGluc3RhbmNlcy8+XG4iOwogICAgCiAgICAKICAgIC8vTmV0cyA6CgogICAgb3M8PGluZGVudDw8IjxuZXRzPlxuIiA7CiAgICBpbmRlbnQrKzsKCiAgICBmb3Ioc2l6ZV90IGkgPSAwIDsgaSA8IG5ldHNfLnNpemUoKTsgaSsrKQogICAgewogICAgICBuZXRzX1tpXS0+dG9YbWwob3MpIDsKCiAgICAgIC8vbmV0c18gOiB2ZWN0b3IgZGUgTmV0LCBvbiB2ZXV0IGFjY8OpZGVyIMOgIGwnw6lsw6ltZW50IG5vZGVzXyBkZSBOZXQKICAgICAgLy9PbiB2ZXV0IHLDqWN1cMOpcmVyIHRvdXMgbGVzIMOpbMOpbWVudCBkJ3VuIHZlY3RldXIgZGUgTmV0CgogICAgICBzdGQ6OnZlY3RvcjxOb2RlKj4gbm9kZXMgPSBuZXRzX1tpXS0+Z2V0Tm9kZXMoKSA7IC8vIG9uIHJlY3Vww6hyZSBsZSBuZXQgZCdpbmRpY2UgaSwgY2UgbmV0IGVzdCBsdWkgbcOqbWUgdW4gdmVjdGV1ciBkZSBub2RlCiAgICAgIGluZGVudCsrIDsKCiAgICAgIGZvcihzaXplX3QgaiA9IDAgOyBqIDwgbm9kZXMuc2l6ZSgpIDsgaisrKQogICAgICB7CiAgICAgICAgaWYobm9kZXNbal0gIT0gTlVMTCkvL29uIHBhcmNvdXQgdG91cyBsZXMgw6lsw6ltZW50cyBjb25uZWN0w6lzIGF1IG5ldAogICAgICAgIHsKCiAgICAgICAgICBub2Rlc1tqXS0+dG9YbWwob3MpIDsKICAgICAgICB9CiAgICAgICAgICAKICAgICAgfQogICAgICBpbmRlbnQtLTsKICAgICAgb3M8PGluZGVudDw8IjwvbmV0PlxuIjsKICAgIH0KICAgIGluZGVudC0tOwogICAgb3M8PGluZGVudDw8IjwvbmV0cz5cbiIgOwogICAgaW5kZW50LS07CiAgICBvczw8aW5kZW50PDwiPC9jZWxsPlxuIjsKICAgIAogIH0KCiAgLypQYXJzZXVycyBYTUwgOiovCgogIENlbGwqIENlbGw6OmZyb21YbWwoIHhtbFRleHRSZWFkZXJQdHIgcmVhZGVyICkKICB7CiAgICAgIC8vbGUgcmVhZGVyIGVzdCB1biBzdHJ1Y3R1cmUgQwogICAgICAvLyBPbiBlbnZvaXQgbm90cmUgZmljaGllciB0ZXh0ZSAKICAgICAvL09uIGTDqWZpbml0IGRlcyDDqXRhdHMgZGUgbGVjdHVyZQogICAgICBlbnVtICBTdGF0ZSB7IEluaXQgICAgICAgICAgID0gMAogICAgICAgICAgICAgICAgLCBCZWdpbkNlbGwgICAgIC8vIG9uIGNvbW1lbmNlIGEgbGlyZSBsYSBjZWxsdWxlCiAgICAgICAgICAgICAgICAsIEJlZ2luVGVybXMgICAgLy8gb24gY29tbWVuY2UgYSBsaXJlIGxlcyBUZXJtcwogICAgICAgICAgICAgICAgLCBFbmRUZXJtcyAgICAgIC8vIG9uIGZpbmkgZGUgbGlyZSBsZXMgdGVybXMKICAgICAgICAgICAgICAgICwgQmVnaW5JbnN0YW5jZXMgLy8gb24gY29tbWVuY2UgbGVzIGluc3RhbmNlcy4uLmV0YwogICAgICAgICAgICAgICAgLCBFbmRJbnN0YW5jZXMKICAgICAgICAgICAgICAgICwgQmVnaW5OZXRzCiAgICAgICAgICAgICAgICAsIEVuZE5ldHMKICAgICAgICAgICAgICAgICwgRW5kQ2VsbAogICAgICAgICAgICAgICAgfTsKCiAgICBjb25zdCB4bWxDaGFyKiBjZWxsVGFnICAgICAgPSB4bWxUZXh0UmVhZGVyQ29uc3RTdHJpbmcoIHJlYWRlciwgKGNvbnN0IHhtbENoYXIqKSJjZWxsIiApOy8vb24gcsOpY3Vww6hyZSBsZXMgbW90cyBjbGVmcwogICAgY29uc3QgeG1sQ2hhciogbmV0c1RhZyAgICAgID0geG1sVGV4dFJlYWRlckNvbnN0U3RyaW5nKCByZWFkZXIsIChjb25zdCB4bWxDaGFyKikibmV0cyIgKTsKICAgIGNvbnN0IHhtbENoYXIqIHRlcm1zVGFnICAgICA9IHhtbFRleHRSZWFkZXJDb25zdFN0cmluZyggcmVhZGVyLCAoY29uc3QgeG1sQ2hhciopInRlcm1zIiApOwogICAgY29uc3QgeG1sQ2hhciogaW5zdGFuY2VzVGFnID0geG1sVGV4dFJlYWRlckNvbnN0U3RyaW5nKCByZWFkZXIsIChjb25zdCB4bWxDaGFyKikiaW5zdGFuY2VzIiApOwoKICAgIENlbGwqIGNlbGwgICA9IE5VTEw7IC8vIG9uIGNyw6llciB1biBjZWxsIHZpZGUKICAgIFN0YXRlIHN0YXRlICA9IEluaXQ7IC8vIG9uIGluaXRpYWxpc2UgbCfDqXRhdAoKICAgIHdoaWxlICggdHJ1ZSApIHsKICAgICAgaW50IHN0YXR1cyA9IHhtbFRleHRSZWFkZXJSZWFkKHJlYWRlcik7IAogICAgICAvLyB4bWxUZXh0UmVhZGVyUmVhZCBsaXQgbGUgY29udGVudSBkdSBub2V1ZCBhY3R1ZWwuCiAgICAgIC8vaWwgcmVudm9pZSAxIHNpIGxlIG5vZXVkIGVzdCBjb3JyZWN0ZW1lbnQgbHUKICAgICAgLy8wIHNpbm9uCgogICAgICBpZiAoc3RhdHVzICE9IDEpIAogICAgICB7CiAgICAgICAgaWYgKHN0YXR1cyAhPSAwKSAKICAgICAgICB7CiAgICAgICAgICBjZXJyIDw8ICJbRVJST1JdIENlbGw6OmZyb21YbWwoKTogVW5leHBlY3RlZCB0ZXJtaW5hdGlvbiBvZiB0aGUgWE1MIHBhcnNlci4iIDw8IGVuZGw7CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICBzd2l0Y2ggKCB4bWxUZXh0UmVhZGVyTm9kZVR5cGUocmVhZGVyKSApIAogICAgICB7CiAgICAgICAgLy94bWxUZXh0UmVhZGVyTm9kZVR5cGUgcsOpY3Vww6hyZSBsZSB0eXBlIGR1IG5vZXVkIGFjdHVlbAogICAgICAgIC8vY2EgcmV0b3VybmUgbGUgdHlwZSBkdSBub2V1ZCBvdSAtMSBlbiBjYXMgZCdlcnJldXIKCiAgICAgICAgY2FzZSBYTUxfUkVBREVSX1RZUEVfQ09NTUVOVDoKICAgICAgICAgIC8vc2kgb24gZXN0IGRlIHR5cGUgY29tbWVudGFpcmUgb24gbmUgZmFpdCByaWVuCiAgICAgICAgY2FzZSBYTUxfUkVBREVSX1RZUEVfV0hJVEVTUEFDRToKICAgICAgICAgIC8vc2kgb24gZXN0IGRlIHR5cGUgZXNwYWNlIG9uIG5lIGZhaXQgcmllbgogICAgICAgIGNhc2UgWE1MX1JFQURFUl9UWVBFX1NJR05JRklDQU5UX1dISVRFU1BBQ0U6CiAgICAgICAgICAvL3NpIG9uIGVzdCBkZSB0eXBlICJlc3BhY2Ugc2lnbmlmaWNhdGlmIiBvbiBuZSBmYWl0IHJpZW4KICAgICAgICAgIGNvbnRpbnVlOwogICAgICB9CgogICAgICAvLyBvbiByw6ljdXDDqHJlIGxlIG5vbSBkdSBub2V1ZCBkYW5zIGxhIHZhcmlhYmxlIG5vZGVOYW1lCiAgICAgIGNvbnN0IHhtbENoYXIqIG5vZGVOYW1lID0geG1sVGV4dFJlYWRlckNvbnN0TG9jYWxOYW1lKCByZWFkZXIgKTsKICAgICAgLy9lbiBkw6lib3V0IGRlIGJvdWNsZSBzdGF0ZSA9IEluaXQKICAgICAgCiAgICAgIHN3aXRjaCAoIHN0YXRlICkgCiAgICAgIHsKICAgICAgICBjYXNlIEluaXQ6CiAgICAgICAgICBpZiAoY2VsbFRhZyA9PSBub2RlTmFtZSkgLy9zaSBsZSBub20gZGUgbm90cmUgbm9ldWQgZXN0IGJpZW4gY2VsbHVsZSBvbiBwYXNzZSBhIGxhIHN1aXRlCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRlID0gQmVnaW5DZWxsOyAvL29uIGNoYW5nZSBsJ8OpdGF0IGNhciBvbiBjb21tZW5jZSDDoCBjaGVja2VyIGxhIGNlbGwKICAgICAgICAgICAgc3RyaW5nIGNlbGxOYW1lID0geG1sQ2hhclRvU3RyaW5nKCB4bWxUZXh0UmVhZGVyR2V0QXR0cmlidXRlKCByZWFkZXIsIChjb25zdCB4bWxDaGFyKikibmFtZSIgKSApOyAvLyBvbiByw6ljdXDDqHJlIGxlIG5vbSBkZSBsYSBjZWxsdWxlCiAgICAgICAgICAgIGlmIChub3QgY2VsbE5hbWUuZW1wdHkoKSkgCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBjZWxsID0gbmV3IENlbGwgKCBjZWxsTmFtZSApOyAvLyBvbiBjcsOpZXIgdW5lIGNlbGx1bGUKICAgICAgICAgICAgICBzdGF0ZSA9IEJlZ2luVGVybXM7Ly9vbiBhIGZpbmkgbGEgY2VsbCBvbiB2YSBwb3V2b2lyIHBhc3NlciBhdXggdGVybXMKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgLy9zaSBqYW1haXMgb24gbifDqXRhaXQgcGFzIGRhbnMgY2UgY2FzIGFsb3JzIHF1J29uIGVzdCBkYW5zIGwnw6l0YXQgZCdpbml0aWFsaXNhdGlvbiBvbiBtZXQgZmluIGF1IHByb2dyYW1tZSBjYXIgaWwgeSBhIHVuIHByb2Jsw6htZQogICAgICAgICAgYnJlYWs7CiAgICAgICAgICAKICAgICAgICBjYXNlIEJlZ2luVGVybXM6CiAgICAgICAgCiAgICAgICAgLy9zaSBjZXR0ZSBmb2lzIGNpIGxlIG5vZXVkIHF1ZSBsJ29uIGxpdCBlc3QgZGUgdHlwZSB0ZXJtIG9uIGVmZmVjdHVlIGNlIGNhcyBsYQogICAgICAgIC8veG1sVGV4dFJlYWRlck5vZGVUeXBlKHJlYWRlcikgPT0gWE1MX1JFQURFUl9UWVBFX0VMRU1FTlQgcGVybWV0IGRlIHbDqXJpZmllciBxdWUgYydlc3QgdW5lIGJhbGlzZSBvdXZyYW50ZQoKICAgICAgICAgIGlmICggKG5vZGVOYW1lID09IHRlcm1zVGFnKSBhbmQgKHhtbFRleHRSZWFkZXJOb2RlVHlwZShyZWFkZXIpID09IFhNTF9SRUFERVJfVFlQRV9FTEVNRU5UKSApIAogICAgICAgICAgewoKICAgICAgICAgICAgc3RhdGUgPSBFbmRUZXJtczsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICAKICAgICAgICBjYXNlIEVuZFRlcm1zOgoKICAgICAgICAgIGlmICggKG5vZGVOYW1lID09IHRlcm1zVGFnKSBhbmQgKHhtbFRleHRSZWFkZXJOb2RlVHlwZShyZWFkZXIpID09IFhNTF9SRUFERVJfVFlQRV9FTkRfRUxFTUVOVCkgKSAKICAgICAgICAgIC8vb24gZXN0IGEgbGEgZmluIGRlIGxlY3R1cmUgZGVzIHRlcm1zLCBvbiB2w6lyaWZpZSBjYSBhdmVjIGNldHRlIGZvbmN0aW9uIDogeG1sVGV4dFJlYWRlck5vZGVUeXBlKHJlYWRlcikgPT0gWE1MX1JFQURFUl9UWVBFX0VORF9FTEVNRU5UCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRlID0gQmVnaW5JbnN0YW5jZXM7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfSAKICAgICAgICAgIGVsc2UKICAgICAgICAgIC8vc2kgb24gbidlc3QgcGFzIGRhbnMgbGUgY2FzIGQndW5lIGJhbGlzZSBmZXJtYW50ZSwgYWxvcnMgb24gYXBwcGVsbGUgZnJvbVhtbCgpIGRlIGxhIGNsYXNzZSBUZXJtIAogICAgICAgICAgewogICAgICAgICAgICBpZiAoVGVybTo6ZnJvbVhtbChjZWxsLHJlYWRlcikpIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSBCZWdpbkluc3RhbmNlczoKICAgICAgICAgIGlmICggKG5vZGVOYW1lID09IGluc3RhbmNlc1RhZykgYW5kICh4bWxUZXh0UmVhZGVyTm9kZVR5cGUocmVhZGVyKSA9PSBYTUxfUkVBREVSX1RZUEVfRUxFTUVOVCkgKSAKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGUgPSBFbmRJbnN0YW5jZXM7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSBFbmRJbnN0YW5jZXM6CiAgICAgICAgICBpZiAoIChub2RlTmFtZSA9PSBpbnN0YW5jZXNUYWcpIGFuZCAoeG1sVGV4dFJlYWRlck5vZGVUeXBlKHJlYWRlcikgPT0gWE1MX1JFQURFUl9UWVBFX0VORF9FTEVNRU5UKSApIAogICAgICAgICAgewogICAgICAgICAgICBzdGF0ZSA9IEJlZ2luTmV0czsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9IAogICAgICAgICAgZWxzZSAKICAgICAgICAgIHsKICAgICAgICAgICAgaWYgKEluc3RhbmNlOjpmcm9tWG1sKGNlbGwscmVhZGVyKSkgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIEJlZ2luTmV0czoKICAgICAgICAgIGlmICggKG5vZGVOYW1lID09IG5ldHNUYWcpIGFuZCAoeG1sVGV4dFJlYWRlck5vZGVUeXBlKHJlYWRlcikgPT0gWE1MX1JFQURFUl9UWVBFX0VMRU1FTlQpICkgCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRlID0gRW5kTmV0czsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIEVuZE5ldHM6CiAgICAgICAgICBpZiAoIChub2RlTmFtZSA9PSBuZXRzVGFnKSBhbmQgKHhtbFRleHRSZWFkZXJOb2RlVHlwZShyZWFkZXIpID09IFhNTF9SRUFERVJfVFlQRV9FTkRfRUxFTUVOVCkgKSAKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGUgPSBFbmRDZWxsOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0gCiAgICAgICAgICBlbHNlIAogICAgICAgICAgewogICAgICAgICAgICBpZiAoTmV0Ojpmcm9tWG1sKGNlbGwscmVhZGVyKSkgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIEVuZENlbGw6CiAgICAgICAgICBpZiAoIChub2RlTmFtZSA9PSBjZWxsVGFnKSBhbmQgKHhtbFRleHRSZWFkZXJOb2RlVHlwZShyZWFkZXIpID09IFhNTF9SRUFERVJfVFlQRV9FTkRfRUxFTUVOVCkgKSAKICAgICAgICAgIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgYnJlYWs7CiAgICAgIH0KCiAgICAgIGNlcnIgPDwgIltFUlJPUl0gQ2VsbDo6ZnJvbVhtbCgpOiBVbmtub3duIG9yIG1pc3BsYWNlZCB0YWcgPCIgPDwgbm9kZU5hbWUKICAgICAgICAgICA8PCAiPiAobGluZToiIDw8IHhtbFRleHRSZWFkZXJHZXRQYXJzZXJMaW5lTnVtYmVyKHJlYWRlcikgPDwgIikuIiA8PCBlbmRsOwogICAgICBicmVhazsKICAgIH0KCiAgICByZXR1cm4gY2VsbDsKICB9CgogIENlbGwqIENlbGw6OmxvYWQgKCBjb25zdCBzdHJpbmcmIGNlbGxOYW1lICkKICB7CiAgICAvL29uIHZhIGxpcmUgdW4gZmljaGllciB4bWwgZGUgbm9tIG5hbWUKICAgIHN0cmluZyAgICAgICAgICAgY2VsbEZpbGUgPSAiLi9jZWxscy8iICsgY2VsbE5hbWUgKyAiLnhtbCI7CiAgICB4bWxUZXh0UmVhZGVyUHRyIHJlYWRlcjsgLy8gb24gaW5pdGlhbGlzZSBub3RyZSByZWFkZXIgZGUgc3RydWN0CgogICAgLy9QZXJtZXQgZGUgY29udmVydGlyIGxlIGZpY2hpZXIgdGV4dGUgZW4gdW4gcmVhZGVyIHV0aWxpc2FibGUgcG91ciBsZSByZXN0ZSBkdSBwcm9ncmFtbWUuCgogICAgcmVhZGVyID0geG1sTmV3VGV4dFJlYWRlckZpbGVuYW1lKCBjZWxsRmlsZS5jX3N0cigpICk7IC8vc2kgbGUgcmVhZGVyIGVzdCBOVUxMIGMnZXN0IHF1ZSBsJ29uIGEgcGFzIHLDqXVzc2kgw6Agb3V2cmlyIGxlIGZpY2hpZXIKICAgIAogICAgaWYgKHJlYWRlciA9PSBOVUxMKSB7CiAgICAgIGNlcnIgPDwgIltFUlJPUl0gQ2VsbDo6bG9hZCgpIHVuYWJsZSB0byBvcGVuIGZpbGUgPCIgPDwgY2VsbEZpbGUgPDwgIj4uIiA8PCBlbmRsOwogICAgICByZXR1cm4gTlVMTDsKICAgIH0KICAgIC8vb24gdmEgY29udmVydGlyIGxlIHJlYWRlciBlbiB1bmUgc3RydWN0dXJlIGRlIGRvbm7DqWVzCiAgICBDZWxsKiBjZWxsID0gQ2VsbDo6ZnJvbVhtbCggcmVhZGVyICk7CiAgICAvL29uIGxpYsOocmUgbGUgcG9pbnRldXIgcmVhZGVyLgogICAgeG1sRnJlZVRleHRSZWFkZXIoIHJlYWRlciApOwoKICAgIHJldHVybiBjZWxsOwogIH0KICB2b2lkICBDZWxsOjpzYXZlICgpIGNvbnN0CiAgewogICAgLy92YSBwZXJtZXR0cmUgZGUgc2F1dmVnYXJkZXIgdW4gc3RydWN0dXJlIGRlIGRvbm7DqWVzIHN1ciBkaXNxdWUuCiAgICBzdHJpbmcgIGZpbGVOYW1lICAgPSBnZXROYW1lKCkgKyAiLnhtbCI7CiAgICBmc3RyZWFtIGZpbGVTdHJlYW0gKCBmaWxlTmFtZS5jX3N0cigpLCBpb3NfYmFzZTo6b3V0fGlvc19iYXNlOjp0cnVuYyApOwogICAgaWYgKG5vdCBmaWxlU3RyZWFtLmdvb2QoKSkgewogICAgICBjZXJyIDw8ICJbRVJST1JdIENlbGw6OnNhdmUoKSB1bmFibGUgdG8gb3BlbiBmaWxlIDwiIDw8IGZpbGVOYW1lIDw8ICI+LiIgPDwgZW5kbDsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGNlcnIgPDwgIlNhdmluZyA8Q2VsbCAiIDw8IGdldE5hbWUoKSA8PCAiPiBpbiA8IiA8PCBmaWxlTmFtZSA8PCAiPiIgPDwgZW5kbDsKICAgIHRvWG1sKCBmaWxlU3RyZWFtICk7CgogICAgZmlsZVN0cmVhbS5jbG9zZSgpOwogIH0KCgoKCn0gIC8vIE5ldGxpc3QgbmFtZXNwYWNlLgoAAAAAAAAAACEwAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtCwAAAAAAAPULAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3DQAAAAAAAPcNAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "Cell.h",
			"redo_stack":
			[
				[
					9,
					1,
					"",
					null,
					"AgAAABUBAAAAAAAAqQkAAAAAAAAAAAAAMAsAAAAAAAAwCwAAAAAAAJQIAAAKICAKICAKICB1c2luZyBuYW1lc3BhY2Ugc3RkOwoKICBjbGFzcyBDZWxsIAogIHsKICAKICAgIHB1YmxpYzoKICAKICAgICAgc3RhdGljICAgICAgIHN0ZDo6dmVjdG9yPENlbGwqPiYgICAgIGdldEFsbENlbGxzICAgICAgICgpOwogICAgICBzdGF0aWMgICAgICAgQ2VsbCogICAgICAgICAgICAgICAgICAgZmluZCAgICAgICAgICAgICAgKCBjb25zdCBzdGQ6OnN0cmluZyYgKTsKICAKICAgIHB1YmxpYzogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAvL0NvbnN0cnVjdGV1cnMgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2VsbCAgICAgICAgICAgICAgKCBjb25zdCBzdGQ6OnN0cmluZyYgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfkNlbGwgICAgICAgICAgICAgICgpOwoKICAgIC8vQWNjZXNzZXVycyA6CgogICAgICBpbmxpbmUgY29uc3Qgc3RkOjpzdHJpbmcmICAgICAgICAgICAgZ2V0TmFtZSAgICAgICAgICAgKCkgY29uc3Q7CiAgICAgIGlubGluZSBjb25zdCBzdGQ6OnZlY3RvcjxJbnN0YW5jZSo+JiBnZXRJbnN0YW5jZXMgICAgICAoKSBjb25zdDsKICAgICAgaW5saW5lIGNvbnN0IHN0ZDo6dmVjdG9yPFRlcm0qPiYgICAgIGdldFRlcm1zICAgICAgICAgICgpIGNvbnN0OwogICAgICBpbmxpbmUgY29uc3Qgc3RkOjp2ZWN0b3I8TmV0Kj4mICAgICAgZ2V0TmV0cyAgICAgICAgICAgKCkgY29uc3Q7CiAgICAgICAgICAgICAgICAgICBJbnN0YW5jZSogICAgICAgICAgICAgICBnZXRJbnN0YW5jZSAgICAgICAoIGNvbnN0IHN0ZDo6c3RyaW5nJiApIGNvbnN0OwogICAgICAgICAgICAgICAgICAgVGVybSogICAgICAgICAgICAgICAgICAgZ2V0VGVybSAgICAgICAgICAgKCBjb25zdCBzdGQ6OnN0cmluZyYgKSBjb25zdDsKICAgICAgICAgICAgICAgICAgIE5ldCogICAgICAgICAgICAgICAgICAgIGdldE5ldCAgICAgICAgICAgICggY29uc3Qgc3RkOjpzdHJpbmcmICkgY29uc3Q7CgogICAgLy9Nb2RpZmljYXRldXJzIDoKICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgdm9pZCAgICAgICAgICAgICAgICAgICAgc2V0TmFtZSAgICAgICAgICAgKCBjb25zdCBzdGQ6OnN0cmluZyYgKTsKICAgICAgICAgICAgICAgICAgIHZvaWQgICAgICAgICAgICAgICAgICAgIGFkZCAgICAgICAgICAgICAgICggSW5zdGFuY2UqICk7CiAgICAgICAgICAgICAgICAgICB2b2lkICAgICAgICAgICAgICAgICAgICBhZGQgICAgICAgICAgICAgICAoIFRlcm0qICk7CiAgICAgICAgICAgICAgICAgICB2b2lkICAgICAgICAgICAgICAgICAgICBhZGQgICAgICAgICAgICAgICAoIE5ldCogKTsKICAgICAgICAgICAgICAgICAgIHZvaWQgICAgICAgICAgICAgICAgICAgIHJlbW92ZSAgICAgICAgICAgICggSW5zdGFuY2UqICk7CiAgICAgICAgICAgICAgICAgICB2b2lkICAgICAgICAgICAgICAgICAgICByZW1vdmUgICAgICAgICAgICAoIFRlcm0qICk7CiAgICAgICAgICAgICAgICAgICB2b2lkICAgICAgICAgICAgICAgICAgICByZW1vdmUgICAgICAgICAgICAoIE5ldCogKTsKICAgICAgICAgICAgICAgICAgIGJvb2wgICAgICAgICAgICAgICAgICAgIGNvbm5lY3QgICAgICAgICAgICggY29uc3Qgc3RkOjpzdHJpbmcmIG5hbWUsIE5ldCogbmV0ICk7CiAgICAgICAgICAgICAgICAgICB1bnNpZ25lZCBpbnQgICAgICAgICAgICBuZXdOZXRJZCAgICAgICAgICAoKTsKICAgIAogICAgICAgICAgICAgICAgICAgdm9pZCAgICAgICAgICAgICAgICAgICAgdG9YbWwgICAgICAgICAgICAgKG9zdHJlYW0mKSBjb25zdCA7CiAgICAgc3RhdGljICAgICAgICBDZWxsKiAgICAgICAgICAgICAgICAgICBmcm9tWG1sICAgICAgICAgICAoeG1sVGV4dFJlYWRlclB0ciByZWFkZXIpOyAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICB2b2lkICAgICAgICAgICAgICAgICAgICBzYXZlICAgICAgICAgICAgICAoKSBjb25zdCA7CiAgICAgc3RhdGljICAgICAgICBDZWxsKiAgICAgICAgICAgICAgICAgICBsb2FkICAgICAgICAgICAgICAoIGNvbnN0IHN0cmluZyYgY2VsbE5hbWUgKSA7CiAgICBwcml2YXRlOgogIAogICAgICBzdGF0aWMgIHN0ZDo6dmVjdG9yPENlbGwqPiAgICAgIGNlbGxzXzsgLy8gbGlzdGUgZGUgdG91dGU",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcAgAAAAAAADALAAAAAAAAAAAAAAAA8L8"
				]
			],
			"settings":
			{
				"buffer_size": 3269,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Net.h",
			"settings":
			{
				"buffer_size": 2201,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGMEAAAAAAAAZAQAAAAAAAAAAAAAZAQAAAAAAABmBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGMEAAAAAAAAYwQAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"paste",
					null,
					"AQAAAGYEAAAAAAAAkAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYEAAAAAAAAZgQAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "sat"
					},
					"AwAAAGYEAAAAAAAAZwQAAAAAAAAAAAAAZwQAAAAAAABoBAAAAAAAAAAAAABoBAAAAAAAAGkEAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYEAAAAAAAAZgQAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					2,
					"left_delete",
					null,
					"AgAAAGgEAAAAAAAAaAQAAAAAAAABAAAAdGcEAAAAAAAAZwQAAAAAAAABAAAAYQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGkEAAAAAAAAaQQAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "tatic"
					},
					"BQAAAGcEAAAAAAAAaAQAAAAAAAAAAAAAaAQAAAAAAABpBAAAAAAAAAAAAABpBAAAAAAAAGoEAAAAAAAAAAAAAGoEAAAAAAAAawQAAAAAAAAAAAAAawQAAAAAAABsBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGcEAAAAAAAAZwQAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGwEAAAAAAAAbQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGwEAAAAAAAAbAQAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\t\t\t\t\t"
					},
					"BQAAAHIEAAAAAAAAcwQAAAAAAAAAAAAAcwQAAAAAAAB0BAAAAAAAAAAAAAB0BAAAAAAAAHUEAAAAAAAAAAAAAHUEAAAAAAAAdgQAAAAAAAAAAAAAdgQAAAAAAAB3BAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHIEAAAAAAAAcgQAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					6,
					"right_delete",
					null,
					"BgAAAHcEAAAAAAAAdwQAAAAAAAABAAAATncEAAAAAAAAdwQAAAAAAAABAAAAZXcEAAAAAAAAdwQAAAAAAAABAAAAdHcEAAAAAAAAdwQAAAAAAAABAAAAOncEAAAAAAAAdwQAAAAAAAABAAAAOncEAAAAAAAAdwQAAAAAAAABAAAAZg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHcEAAAAAAAAdwQAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAHcEAAAAAAAAeAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHcEAAAAAAAAdwQAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " ;"
					},
					"AgAAAJcEAAAAAAAAmAQAAAAAAAAAAAAAmAQAAAAAAACZBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcEAAAAAAAAlwQAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJkEAAAAAAAAmgQAAAAAAAAAAAAAmgQAAAAAAACcBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJkEAAAAAAAAmQQAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"paste",
					null,
					"AQAAAJwEAAAAAAAAxwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJwEAAAAAAAAnAQAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "static"
					},
					"BgAAAJwEAAAAAAAAnQQAAAAAAAAAAAAAnQQAAAAAAACeBAAAAAAAAAAAAACeBAAAAAAAAJ8EAAAAAAAAAAAAAJ8EAAAAAAAAoAQAAAAAAAAAAAAAoAQAAAAAAAChBAAAAAAAAAAAAAChBAAAAAAAAKIEAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJwEAAAAAAAAnAQAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKIEAAAAAAAAowQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKIEAAAAAAAAogQAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "\t\t\t\t\t"
					},
					"BQAAAKkEAAAAAAAAqgQAAAAAAAAAAAAAqgQAAAAAAACrBAAAAAAAAAAAAACrBAAAAAAAAKwEAAAAAAAAAAAAAKwEAAAAAAAArQQAAAAAAAAAAAAArQQAAAAAAACuBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKkEAAAAAAAAqQQAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					6,
					"right_delete",
					null,
					"BgAAAK4EAAAAAAAArgQAAAAAAAABAAAATq4EAAAAAAAArgQAAAAAAAABAAAAb64EAAAAAAAArgQAAAAAAAABAAAAZK4EAAAAAAAArgQAAAAAAAABAAAAZa4EAAAAAAAArgQAAAAAAAABAAAAOq4EAAAAAAAArgQAAAAAAAABAAAAOg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4EAAAAAAAArgQAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAM0EAAAAAAAAzgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0EAAAAAAAAzQQAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "Net.cpp",
			"settings":
			{
				"buffer_size": 5413,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAADZEQAAI2luY2x1ZGUgIk5ldC5oIgoKI2luY2x1ZGUgIkNlbGwuaCIKI2luY2x1ZGUgIk5vZGUuaCIKI2luY2x1ZGUgIlRlcm0uaCIKI2luY2x1ZGUgIlBvaW50LmgiCiNpbmNsdWRlICJJbmRlbnRhdGlvbi5oIgojaW5jbHVkZSAiWG1sVXRpbC5oIgoKbmFtZXNwYWNlIE5ldGxpc3QKewoJCgoJTmV0OjpOZXQoQ2VsbCogY2VsbHVsZSAsIGNvbnN0IHN0ZDo6c3RyaW5nJiBuYW1lLCBUZXJtOjpUeXBlIGRpcikgCgkJOiBvd25lcl8gKGNlbGx1bGUpLAoJCSAgbmFtZV8obmFtZSksCgkJICBpZF8oY2VsbHVsZS0+bmV3TmV0SWQoKSksCgkJICB0eXBlXyhkaXIpLAoJCSAgbm9kZXNfKCkgLy9vbiB2ZXV0IHVuIHZlY3RldXIgdmlkZSDDoCBsJ2luaWFsaXNhdGlvbgoJewoJCS8vIG9uIGFqb3V0ZSBsZSBub2V1ZCBjcsOpZXIgYXUgbml2ZWF1IGRlIGxhIENlbGwKCQljZWxsdWxlLT5hZGQodGhpcykgOwoJfQoJCglOZXQ6On5OZXQoKQoJewoJCS8vUXVhbmQgb24gc3VwcHJpbWUgdW4gbmV0IGlsIGZhdXQgZMOpdGFjaGVyIHRvdXMgbGVzIG5vZGVzIHF1aSBsdWkgc29udCBjb25uZWN0w6lzCgkJLy9JbCBmYXV0IMOpZ2FsZW1lbnQgbWV0dHJlIGwnYXR0cmlidXQgbmV0XyBkZXMgVGVybXMgw6AgTlVMTAoJCWZvcihzaXplX3QgaSA9IDAgOyBpIDwgbm9kZXNfLnNpemUoKTsgaSsrKQoJCXsKCQkJLy9ub2Rlc19baV0gOiBOb2RlKgoJCQkvL25vZGVzX1tpXS0+Z2V0VGVybSgpIDogVGVybSoKCQkJLy8obm9kZXNfW2ldLT5nZXRUZXJtKCkpLT5zZXROZXQoTlVMTCkgOiBUZXJtOjpuZXRfID1OVUxMCgkJCShub2Rlc19baV0tPmdldFRlcm0oKSktPnNldE5ldChOVUxMKSA7CgkJCW5vZGVzXy5wb3BfYmFjaygpIDsKCQl9CgkJb3duZXJfLT5yZW1vdmUodGhpcykgOyAvL29uIHJldGlyZSBsZSBuZXQgZGUgc2EgY2VsbAoJfQoJc2l6ZV90IE5ldDo6Z2V0RnJlZU5vZGVJZCgpIGNvbnN0IC8vIHJlbnZlcnJhIGwnaW5kZXggZGUgbGEgcHJlbWllcmUgY2FzZSBsaWJyZSBkYW5zIGxlIHRhYmxlYXUgbm9kZXNfLCBzaSBhdWN1bmUgY2FzZSBuJ2VzdCB2aWRlLCBlbGxlIHJlbnZlcnJhIGxhIHRhaWxsZSBkdSB0YWJsZWF1LCBpZS4gbCdpbmRleCBhcCBsZSBkZXJuaWVyIGVsZW1lbnQKCXsKCQlmb3Ioc2l6ZV90IGkgPSAwIDsgaSA8IG5vZGVzXy5zaXplKCkgOyBpKyspCgkJCS8vZmFpcmUgKytpIGVzdCBwbHVzIHJhcGlkZSBxdWUgaSsrCgkJCS8vcXVhbmQgb24gZmFpdCBpKysgbGUgY29tcGlsYXRldXIgZ2FyZGUgZW4gbcOpbW9pcmUgbGEgdmFsZXVyIGRlIGkgYXZhbnQgaW5jcsOpbWVudGF0aW9uCgkJCS8vKytpIG5lIGdhcmRlIHF1ZSBsYSBub3V2ZWxsZSB2YWxldXIgZW4gbcOpbW9pcmUuCgkJewoJCQlpZihub2Rlc19baV0gPT0gTlVMTCkKCQkJewoJCQkJYnJlYWsgOyAvLyBkw6hzIHF1ZSBsJ29uIHJlbmNvbnRyZSB1bmUgcG9pbnRldXIgTlVMTCBvbiBhcnJldGUgbGEgYm91Y2xlIGV0IG9uIHJlbnZvaWUgc2EgdmFsZXVyCgkJCQlyZXR1cm4gaSA7CgkJCX0KCQl9CgkJcmV0dXJuIG5vZGVzXy5zaXplKCkgOwoJfSAKCQoJLy9Nb2RpZmljYXRldXJzIDoKCgl2b2lkIE5ldDo6YWRkICggTm9kZSogbm9ldWQpCgl7CgkJLy9Db3JyZWN0aW9uIDoKCQkvL2lmKG5vdCBuICkgcmV0dXJuIDsKCQkvL1Blcm1ldCBkZSBzb3J0aXIgZGUgbGEgZm9uY3Rpb24gZGFucyBsZSBjYXMgb3Ugb24gYWpvdXRlcmFpdCB1biBwb2ludGV1ciBOVUxMCgkJLy9JbCBmYXV0IGFqb3V0ZXIgdW4gbWVzc2FnZSBkJ2VycmV1ciBkYW5zIGNlIGNhcy4KCgkJLy9sZSB2ZWN0ZXVyIGV0YW50IHZpZGUgYXUgZMOpcGFydCwgbGUgMWVyIGVsZW1lbnQgYWpvdXTDqSBkb2l0IGV0cmUgcHVzaF9iYWNrIG1hbnVlbGxlbWVudAoJCWlmKG5vZGVzXy5zaXplKCkgPT0gMCkKCQl7CgkJCW5vZGVzXy5wdXNoX2JhY2sobm9ldWQpIDsKCQkJbm9ldWQtPnNldElkKDApOwoJCX0KCQllbHNlLy9zJ2lsIG4nZXN0IHBhcyB2aWRlIG9uIHJlbnRyZSBpY2kKCQl7CgkJCXNpemVfdCBwb3NpdGlvbl9pbnNlcnRpb24gPSBub2V1ZC0+Z2V0SWQoKSA7IC8vIG9uIHLDqWN1cMOocmUgbCdpZCBkdSBub2V1ZCBxdWUgbCdvbiB2ZXV0IGluc8OpcmVyCgkJCS8vb24gcmVnYXJkZSBzaSBsJ2lkIGVzdCBkw6lmaW5pLCBzaSBjZSBuJ2VzdCBwYXMgbGUgY2FzLCBvbiBtZXQgbm90cmUgbm9ldWQgYSBsYSBwcmVtaWVyZSBwbGFjZSBkaXNwbwoJCQkKCQkJaWYocG9zaXRpb25faW5zZXJ0aW9uID09IE5vZGU6Om5vaWQpCgkJCXsKCQkJCS8vb24gYXVyYWl0IHB1IHV0aWxpc2VyIGxhIGZvbmN0aW9uIGdldElkIHBvdXIgc2ltcGxpZmllciBjZSBib3JkZWwKCQkJCWZvcihzaXplX3QgaSA9IDAgOyBpIDwgbm9kZXNfLnNpemUoKSA7IGkrKykKCQkJCXsKCQkJCQlpZihub2Rlc19baV0gPT0gTlVMTCkKCQkJCQl7CgkJCQkJCW5vZGVzX1tpXSA9IG5vZXVkIDsKCQkJCQkJbm9ldWQtPnNldElkKGkpIDsKCQkJCQkJZXhpdCgwKSA7CgkJCQkJfQoJCQkJfQoJCQkJbm9kZXNfLnB1c2hfYmFjayhub2V1ZCkgOwoJCQkJbm9ldWQtPnNldElkKG5vZGVzXy5zaXplKCktMSkgOwoJCQkJCgkJCX0KCQkJZWxzZQoJCQl7CgkJCQkvKgoJCQkJT24gdmEgaW5zw6lyZXIgdW4gbm9ldWQgw6AgbGEgcG9zaXRpb24gcG9zaXRpb25faW5zZXJ0aW9uIGRlIG5vdHJlIHZlY3RldXIgbm9kZXNfLgoJCQkJU2kgbGEgcG9zaXRpb24gZXhpc3RlIGTDqWphLCBvbiBpbnPDqHJlIMOgIGNldHRlIHBvc2l0aW9uIGVuIHbDqXJpZmlhbnQgcXVlIHJpZW4gbidlc3QgZMOpasOgIMOpY3JpdCDDoCBjZXR0ZSBlbXBsYWNlbWVudAoJCQkJU2lub24gc2kgY2V0dGUgcG9zaXRpb24gbidleGlzdGUgcGFzLCBvbiB2YSBwdXNoX2JhY2soTlVMTCkganVzcXUnw6AgY3LDqWVyIGwnZW1wbGFjZW1lbnQgcXVlIGwnb24gdmV1dAoJCQkJKi8KCQkJCWlmKHBvc2l0aW9uX2luc2VydGlvbiA8IG5vZGVzXy5zaXplKCkpCgkJCQl7CgkJCQkJaWYobm9kZXNfW3Bvc2l0aW9uX2luc2VydGlvbl0gPT0gTlVMTCkKCQkJCQl7CgkJCQkJCW5vZGVzX1twb3NpdGlvbl9pbnNlcnRpb25dID0gbm9ldWQgOyAKCQkJCQl9CgkJCQkJZWxzZQoJCQkJCXsKCQkJCQkJY2VyciA8PCJFcnJldXIgbGUgbm9ldWQgZXN0IGTDqWrDoCBvY2N1cMOpLCBtZXJjaSBkJ2VuIGNob2lzaXIgdW4gYXV0cmUiIDw8IGVuZGwgOwoJCQkJCX0KCQkJCX0KCQkJCWVsc2UKCQkJCXsKCQkJCQl3aGlsZShub2Rlc18uc2l6ZSgpICE9IHBvc2l0aW9uX2luc2VydGlvbikKCQkJCQl7CgkJCQkJCW5vZGVzXy5wdXNoX2JhY2soTlVMTCkgOwoJCQkJCX0KCQkJCQlub2Rlc18ucHVzaF9iYWNrKG5vZXVkKSA7CgkJCQl9CgkJCX0KCQl9CgkJCgkJCgl9Cglib29sIE5ldDo6cmVtb3ZlKCBOb2RlKiBub2V1ZCkKCXsKCQlzaXplX3QgaWQgPSBub2V1ZC0+Z2V0SWQoKSA7IC8vIG9uIHLDqWN1cMOocmUgbCdpbmRpY2UgZHUgbm9ldWQgZGFucyBub2Rlc18KCQlub2Rlc18uZXJhc2Uobm9kZXNfLmJlZ2luKCkraWQpIDsKCQlyZXR1cm4gMCA7Cgl9CgoJdm9pZCBOZXQ6OnRvWG1sKG9zdHJlYW0mIG9zKQoJewoJCWV4dGVybiBJbmRlbnRhdGlvbiBpbmRlbnQgOwoJCW9zPDxpbmRlbnQ8PCI8bmV0IG5hbWU9XCIiPDx0aGlzLT5nZXROYW1lKCk8PCJcIiB0eXBlPVwiIjw8VGVybTo6dG9TdHJpbmcodGhpcy0+Z2V0VHlwZSgpKTw8IlwiLz5cbiI7Ly9vbiBhZmZpY2hlIHRvdXMgbGVzIG5ldHMgZGUgbGEgQ2VsbAoJfQoKCU5ldCogTmV0Ojpmcm9tWG1sKENlbGwqIGNlbGx1bGUsIHhtbFRleHRSZWFkZXJQdHIgcmVhZGVyKQoJewoJCXN0ZDo6c3RyaW5nIG5hbWUgCQkJCT0geG1sQ2hhclRvU3RyaW5nKHhtbFRleHRSZWFkZXJHZXRBdHRyaWJ1dGUocmVhZGVyLCAoY29uc3QgeG1sQ2hhciopIm5hbWUiKSkgOwoJCXN0ZDo6c3RyaW5nIHR5cGVfc3RyaW5nIAkJPSB4bWxDaGFyVG9TdHJpbmcoeG1sVGV4dFJlYWRlckdldEF0dHJpYnV0ZShyZWFkZXIsIChjb25zdCB4bWxDaGFyKikidHlwZSIpKSA7CgkJCgkJaWYobm90KG5hbWUuZW1wdHkoKSBvciB0eXBlX3N0cmluZy5lbXB0eSgpKSkKCQl7CgkJCVRlcm06OlR5cGUgdHlwZSA9IFRlcm06OnRvVHlwZSh0eXBlX3N0cmluZykgOwoJCQlOZXQqIG5ldCA9IG5ldyBOZXQoY2VsbHVsZSwgbmFtZSwgdHlwZSkgOwoJCQl3aGlsZSh4bWxUZXh0UmVhZGVyTm9kZVR5cGUocmVhZGVyKSAhPSBYTUxfUkVBREVSX1RZUEVfRU5EX0VMRU1FTlQpCgkJCXsKCQkJCWlmKG5vdChOb2RlOjpmcm9tWG1sKG5ldCxyZWFkZXIpKSkgLy8gb24gYXBwZWxsZSBsYSBmb25jdGlvbiBmcm9tWG1sIGRlIGxhIGNsYXNzZSBuZXQgcXVpIHZhIG5vdXMgcGVybWV0dHJlIGQnYWZmaWNoZXIgdG91cyBsZXMgbm9ldWRzCgkJCQl7CgkJCQkJY2VyciA8PCAiRXJyZXVyIGxvcnMgZHUgY2hhcmdlbWVudCBkZSBOb2RlcyI8PGVuZGwgOwoJCQkJCWV4aXQoMCkgOwoJCQkJfQoJCQl9CgkJCXJldHVybiBuZXQgOwoJCX0KCQllbHNlCgkJewoJCQljZXJyPDwgIkltcG9zc2libGUgZGUgcsOpY3Vww6lyZXIgbGVzIG5ldHMgY29ycmVjdGVtZW50Ijw8ZW5kbCA7CgkJCWV4aXQoMCkgOwoJCX0KCQkKCX0KCQp9AAAAAAAAAAC0EgAAAAAAAAAAAAAAAAAAAAAAALQSAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADXEgAAI2luY2x1ZGUgIk5ldC5oIgoKI2luY2x1ZGUgIkNlbGwuaCIKI2luY2x1ZGUgIk5vZGUuaCIKI2luY2x1ZGUgIlRlcm0uaCIKI2luY2x1ZGUgIlBvaW50LmgiCiNpbmNsdWRlICJJbmRlbnRhdGlvbi5oIgojaW5jbHVkZSAiWG1sVXRpbC5oIgoKbmFtZXNwYWNlIE5ldGxpc3QKewoJCgoJTmV0OjpOZXQoQ2VsbCogY2VsbHVsZSAsIGNvbnN0IHN0ZDo6c3RyaW5nJiBuYW1lLCBUZXJtOjpUeXBlIGRpcikgCgkJOiBvd25lcl8gKGNlbGx1bGUpLAoJCSAgbmFtZV8obmFtZSksCgkJICBpZF8oY2VsbHVsZS0+bmV3TmV0SWQoKSksCgkJICB0eXBlXyhkaXIpLAoJCSAgbm9kZXNfKCkgLy9vbiB2ZXV0IHVuIHZlY3RldXIgdmlkZSDDoCBsJ2luaWFsaXNhdGlvbgoJewoJCS8vIG9uIGFqb3V0ZSBsZSBub2V1ZCBjcsOpZXIgYXUgbml2ZWF1IGRlIGxhIENlbGwKCQljZWxsdWxlLT5hZGQodGhpcykgOwoJfQoJCglOZXQ6On5OZXQoKQoJewoJCS8vUXVhbmQgb24gc3VwcHJpbWUgdW4gbmV0IGlsIGZhdXQgZMOpdGFjaGVyIHRvdXMgbGVzIG5vZGVzIHF1aSBsdWkgc29udCBjb25uZWN0w6lzCgkJLy9JbCBmYXV0IMOpZ2FsZW1lbnQgbWV0dHJlIGwnYXR0cmlidXQgbmV0XyBkZXMgVGVybXMgw6AgTlVMTAoJCWZvcihzaXplX3QgaSA9IDAgOyBpIDwgbm9kZXNfLnNpemUoKTsgaSsrKQoJCXsKCQkJLy9ub2Rlc19baV0gOiBOb2RlKgoJCQkvL25vZGVzX1tpXS0+Z2V0VGVybSgpIDogVGVybSoKCQkJLy8obm9kZXNfW2ldLT5nZXRUZXJtKCkpLT5zZXROZXQoTlVMTCkgOiBUZXJtOjpuZXRfID1OVUxMCgkJCShub2Rlc19baV0tPmdldFRlcm0oKSktPnNldE5ldChOVUxMKSA7CgkJCW5vZGVzXy5wb3BfYmFjaygpIDsKCQl9CgkJb3duZXJfLT5yZW1vdmUodGhpcykgOyAvL29uIHJldGlyZSBsZSBuZXQgZGUgc2EgY2VsbAoJfQoJc2l6ZV90IE5ldDo6Z2V0RnJlZU5vZGVJZCgpIGNvbnN0IC8vIHJlbnZlcnJhIGwnaW5kZXggZGUgbGEgcHJlbWllcmUgY2FzZSBsaWJyZSBkYW5zIGxlIHRhYmxlYXUgbm9kZXNfLCBzaSBhdWN1bmUgY2FzZSBuJ2VzdCB2aWRlLCBlbGxlIHJlbnZlcnJhIGxhIHRhaWxsZSBkdSB0YWJsZWF1LCBpZS4gbCdpbmRleCBhcCBsZSBkZXJuaWVyIGVsZW1lbnQKCXsKCQlmb3Ioc2l6ZV90IGkgPSAwIDsgaSA8IG5vZGVzXy5zaXplKCkgOyBpKyspCgkJCS8vZmFpcmUgKytpIGVzdCBwbHVzIHJhcGlkZSBxdWUgaSsrCgkJCS8vcXVhbmQgb24gZmFpdCBpKysgbGUgY29tcGlsYXRldXIgZ2FyZGUgZW4gbcOpbW9pcmUgbGEgdmFsZXVyIGRlIGkgYXZhbnQgaW5jcsOpbWVudGF0aW9uCgkJCS8vKytpIG5lIGdhcmRlIHF1ZSBsYSBub3V2ZWxsZSB2YWxldXIgZW4gbcOpbW9pcmUuCgkJewoJCQlpZihub2Rlc19baV0gPT0gTlVMTCkKCQkJewoJCQkJYnJlYWsgOyAvLyBkw6hzIHF1ZSBsJ29uIHJlbmNvbnRyZSB1bmUgcG9pbnRldXIgTlVMTCBvbiBhcnJldGUgbGEgYm91Y2xlIGV0IG9uIHJlbnZvaWUgc2EgdmFsZXVyCgkJCQlyZXR1cm4gaSA7CgkJCX0KCQl9CgkJcmV0dXJuIG5vZGVzXy5zaXplKCkgOwoJfSAKCQoJLy9Nb2RpZmljYXRldXJzIDoKCgl2b2lkIE5ldDo6YWRkICggTm9kZSogbm9ldWQpCgl7CgkJLy9Db3JyZWN0aW9uIDoKCQkvL2lmKG5vdCBuICkgcmV0dXJuIDsKCQkvL1Blcm1ldCBkZSBzb3J0aXIgZGUgbGEgZm9uY3Rpb24gZGFucyBsZSBjYXMgb3Ugb24gYWpvdXRlcmFpdCB1biBwb2ludGV1ciBOVUxMCgkJLy9JbCBmYXV0IGFqb3V0ZXIgdW4gbWVzc2FnZSBkJ2VycmV1ciBkYW5zIGNlIGNhcy4KCgkJLy9sZSB2ZWN0ZXVyIGV0YW50IHZpZGUgYXUgZMOpcGFydCwgbGUgMWVyIGVsZW1lbnQgYWpvdXTDqSBkb2l0IGV0cmUgcHVzaF9iYWNrIG1hbnVlbGxlbWVudAoJCWlmKG5vZGVzXy5zaXplKCkgPT0gMCkKCQl7CgkJCW5vZGVzXy5wdXNoX2JhY2sobm9ldWQpIDsKCQkJbm9ldWQtPnNldElkKDApOwoJCX0KCQllbHNlLy9zJ2lsIG4nZXN0IHBhcyB2aWRlIG9uIHJlbnRyZSBpY2kKCQl7CgkJCXNpemVfdCBwb3NpdGlvbl9pbnNlcnRpb24gPSBub2V1ZC0+Z2V0SWQoKSA7IC8vIG9uIHLDqWN1cMOocmUgbCdpZCBkdSBub2V1ZCBxdWUgbCdvbiB2ZXV0IGluc8OpcmVyCgkJCS8vb24gcmVnYXJkZSBzaSBsJ2lkIGVzdCBkw6lmaW5pLCBzaSBjZSBuJ2VzdCBwYXMgbGUgY2FzLCBvbiBtZXQgbm90cmUgbm9ldWQgYSBsYSBwcmVtaWVyZSBwbGFjZSBkaXNwbwoJCQkKCQkJaWYocG9zaXRpb25faW5zZXJ0aW9uID09IE5vZGU6Om5vaWQpCgkJCXsKCQkJCS8vb24gYXVyYWl0IHB1IHV0aWxpc2VyIGxhIGZvbmN0aW9uIGdldElkIHBvdXIgc2ltcGxpZmllciBjZSBib3JkZWwKCQkJCWZvcihzaXplX3QgaSA9IDAgOyBpIDwgbm9kZXNfLnNpemUoKSA7IGkrKykKCQkJCXsKCQkJCQlpZihub2Rlc19baV0gPT0gTlVMTCkKCQkJCQl7CgkJCQkJCW5vZGVzX1tpXSA9IG5vZXVkIDsKCQkJCQkJbm9ldWQtPnNldElkKGkpIDsKCQkJCQkJZXhpdCgwKSA7CgkJCQkJfQoJCQkJfQoJCQkJbm9kZXNfLnB1c2hfYmFjayhub2V1ZCkgOwoJCQkJbm9ldWQtPnNldElkKG5vZGVzXy5zaXplKCktMSkgOwoJCQkJCgkJCX0KCQkJZWxzZQoJCQl7CgkJCQkvKgoJCQkJT24gdmEgaW5zw6lyZXIgdW4gbm9ldWQgw6AgbGEgcG9zaXRpb24gcG9zaXRpb25faW5zZXJ0aW9uIGRlIG5vdHJlIHZlY3RldXIgbm9kZXNfLgoJCQkJU2kgbGEgcG9zaXRpb24gZXhpc3RlIGTDqWphLCBvbiBpbnPDqHJlIMOgIGNldHRlIHBvc2l0aW9uIGVuIHbDqXJpZmlhbnQgcXVlIHJpZW4gbidlc3QgZMOpasOgIMOpY3JpdCDDoCBjZXR0ZSBlbXBsYWNlbWVudAoJCQkJU2lub24gc2kgY2V0dGUgcG9zaXRpb24gbidleGlzdGUgcGFzLCBvbiB2YSBwdXNoX2JhY2soTlVMTCkganVzcXUnw6AgY3LDqWVyIGwnZW1wbGFjZW1lbnQgcXVlIGwnb24gdmV1dAoJCQkJKi8KCQkJCWlmKHBvc2l0aW9uX2luc2VydGlvbiA8IG5vZGVzXy5zaXplKCkpCgkJCQl7CgkJCQkJaWYobm9kZXNfW3Bvc2l0aW9uX2luc2VydGlvbl0gPT0gTlVMTCkKCQkJCQl7CgkJCQkJCW5vZGVzX1twb3NpdGlvbl9pbnNlcnRpb25dID0gbm9ldWQgOyAKCQkJCQl9CgkJCQkJZWxzZQoJCQkJCXsKCQkJCQkJY2VyciA8PCJFcnJldXIgbGUgbm9ldWQgZXN0IGTDqWrDoCBvY2N1cMOpLCBtZXJjaSBkJ2VuIGNob2lzaXIgdW4gYXV0cmUiIDw8IGVuZGwgOwoJCQkJCX0KCQkJCX0KCQkJCWVsc2UKCQkJCXsKCQkJCQl3aGlsZShub2Rlc18uc2l6ZSgpICE9IHBvc2l0aW9uX2luc2VydGlvbikKCQkJCQl7CgkJCQkJCW5vZGVzXy5wdXNoX2JhY2soTlVMTCkgOwoJCQkJCX0KCQkJCQlub2Rlc18ucHVzaF9iYWNrKG5vZXVkKSA7CgkJCQl9CgkJCX0KCQl9CgkJCgkJCgl9Cglib29sIE5ldDo6cmVtb3ZlKCBOb2RlKiBub2V1ZCkKCXsKCQlzaXplX3QgaWQgPSBub2V1ZC0+Z2V0SWQoKSA7IC8vIG9uIHLDqWN1cMOocmUgbCdpbmRpY2UgZHUgbm9ldWQgZGFucyBub2Rlc18KCQlub2Rlc18uZXJhc2Uobm9kZXNfLmJlZ2luKCkraWQpIDsKCQlyZXR1cm4gMCA7Cgl9CgoJdm9pZCBOZXQ6OnRvWG1sKG9zdHJlYW0mIG9zKQoJewoJCWV4dGVybiBJbmRlbnRhdGlvbiBpbmRlbnQgOwoJCW9zPDxpbmRlbnQ8PCI8bmV0IG5hbWU9XCIiPDx0aGlzLT5nZXROYW1lKCk8PCJcIiB0eXBlPVwiIjw8VGVybTo6dG9TdHJpbmcodGhpcy0+Z2V0VHlwZSgpKTw8IlwiLz5cbiI7Ly9vbiBhZmZpY2hlIHRvdXMgbGVzIG5ldHMgZGUgbGEgQ2VsbAoJfQoKCU5ldCogTmV0Ojpmcm9tWG1sKENlbGwqIGNlbGx1bGUsIHhtbFRleHRSZWFkZXJQdHIgcmVhZGVyKQoJewoJCXN0ZDo6c3RyaW5nIG5hbWUgPSB4bWxDaGFyVG9TdHJpbmcoeG1sVGV4dFJlYWRlckdldEF0dHJpYnV0ZShyZWFkZXIsIChjb25zdCB4bWxDaGFyKikibmFtZSIpKSA7CgkJc3RkOjpzdHJpbmcgdHlwZV9zdHJpbmcgPSB4bWxDaGFyVG9TdHJpbmcoeG1sVGV4dFJlYWRlckdldEF0dHJpYnV0ZShyZWFkZXIsIChjb25zdCB4bWxDaGFyKikidHlwZSIpKSA7CgkJCgkJY291dCA8PCJOYW1lLmVtdHB5IDogIiA8PCBuYW1lLmVtcHR5KCkgPDwgZW5kbCA7CgkJY291dCA8PCJ0eXBlLmVtdHB5IDogIiA8PCB0eXBlX3N0cmluZy5lbXB0eSgpIDw8IGVuZGwgOyAKCQkKCQlpZihub3QobmFtZS5lbXB0eSgpIG9yIHR5cGVfc3RyaW5nLmVtcHR5KCkpKQoJCXsKCQkJVGVybTo6VHlwZSB0eXBlID0gVGVybTo6dG9UeXBlKHR5cGVfc3RyaW5nKSA7CgkJCU5ldCogbmV0ID0gbmV3IE5ldChjZWxsdWxlLCBuYW1lLCB0eXBlKSA7CgkJCS8qd2hpbGUoeG1sVGV4dFJlYWRlck5vZGVUeXBlKHJlYWRlcikgIT0gWE1MX1JFQURFUl9UWVBFX0VORF9FTEVNRU5UKQoJCQl7CgkJCQlpZihub3QoTm9kZTo6ZnJvbVhtbChuZXQscmVhZGVyKSkpIC8vIG9uIGFwcGVsbGUgbGEgZm9uY3Rpb24gZnJvbVhtbCBkZSBsYSBjbGFzc2UgbmV0IHF1aSB2YSBub3VzIHBlcm1ldHRyZSBkJ2FmZmljaGVyIHRvdXMgbGVzIG5vZXVkcwoJCQkJewoJCQkJCWNlcnIgPDwgIkVycmV1ciBsb3JzIGR1IGNoYXJnZW1lbnQgZGUgTm9kZXMiPDxlbmRsIDsKCQkJCQlleGl0KDApIDsKCQkJCX0KCQkJfSovCgkJCXJldHVybiBuZXQgOwoJCX0KCQllbHNlCgkJewoJCQlpZihuYW1lLmVtcHR5KCkpCgkJCXsKCQkJCWNlcnIgPDwgIm5hbWUgaXMgZW1wdHkiIDw8ZW5kbCA7CgkJCX0KCQkJaWYgKHR5cGVfc3RyaW5nLmVtcHR5KCkpCgkJCXsKCQkJCWNlcnIgPDwgIlR5cGUgaXMgZW1wdHkiIDw8IGVuZGwgOwoJCQl9CgkJCWNlcnI8PCAiSW1wb3NzaWJsZSBkZSByw6ljdXDDqXJlciBsZXMgbmV0cyBjb3JyZWN0ZW1lbnQiPDxlbmRsIDsKCQkJZXhpdCgwKSA7CgkJfQoJCQoJfQoJCn0AAAAAAAAAAAMWAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAoFgAAI2luY2x1ZGUgIk5ldC5oIgoKI2luY2x1ZGUgIkNlbGwuaCIKI2luY2x1ZGUgIk5vZGUuaCIKI2luY2x1ZGUgIlRlcm0uaCIKI2luY2x1ZGUgIlBvaW50LmgiCiNpbmNsdWRlICJJbmRlbnRhdGlvbi5oIgojaW5jbHVkZSAiWG1sVXRpbC5oIgoKbmFtZXNwYWNlIE5ldGxpc3QKewoJCgoJTmV0OjpOZXQoQ2VsbCogY2VsbHVsZSAsIGNvbnN0IHN0ZDo6c3RyaW5nJiBuYW1lLCBUZXJtOjpUeXBlIGRpcikgCgkJOiBvd25lcl8gKGNlbGx1bGUpLAoJCSAgbmFtZV8obmFtZSksCgkJICBpZF8oY2VsbHVsZS0+bmV3TmV0SWQoKSksCgkJICB0eXBlXyhkaXIpLAoJCSAgbm9kZXNfKCkgLy9vbiB2ZXV0IHVuIHZlY3RldXIgdmlkZSDDoCBsJ2luaWFsaXNhdGlvbgoJewoJCS8vIG9uIGFqb3V0ZSBsZSBub2V1ZCBjcsOpZXIgYXUgbml2ZWF1IGRlIGxhIENlbGwKCQljZWxsdWxlLT5hZGQodGhpcykgOwoJfQoJCglOZXQ6On5OZXQoKQoJewoJCS8vUXVhbmQgb24gc3VwcHJpbWUgdW4gbmV0IGlsIGZhdXQgZMOpdGFjaGVyIHRvdXMgbGVzIG5vZGVzIHF1aSBsdWkgc29udCBjb25uZWN0w6lzCgkJLy9JbCBmYXV0IMOpZ2FsZW1lbnQgbWV0dHJlIGwnYXR0cmlidXQgbmV0XyBkZXMgVGVybXMgw6AgTlVMTAoJCWZvcihzaXplX3QgaSA9IDAgOyBpIDwgbm9kZXNfLnNpemUoKTsgaSsrKQoJCXsKCQkJLy9ub2Rlc19baV0gOiBOb2RlKgoJCQkvL25vZGVzX1tpXS0+Z2V0VGVybSgpIDogVGVybSoKCQkJLy8obm9kZXNfW2ldLT5nZXRUZXJtKCkpLT5zZXROZXQoTlVMTCkgOiBUZXJtOjpuZXRfID1OVUxMCgkJCShub2Rlc19baV0tPmdldFRlcm0oKSktPnNldE5ldChOVUxMKSA7CgkJCW5vZGVzXy5wb3BfYmFjaygpIDsKCQl9CgkJb3duZXJfLT5yZW1vdmUodGhpcykgOyAvL29uIHJldGlyZSBsZSBuZXQgZGUgc2EgY2VsbAoJfQoJc2l6ZV90IE5ldDo6Z2V0RnJlZU5vZGVJZCgpIGNvbnN0IC8vIHJlbnZlcnJhIGwnaW5kZXggZGUgbGEgcHJlbWllcmUgY2FzZSBsaWJyZSBkYW5zIGxlIHRhYmxlYXUgbm9kZXNfLCBzaSBhdWN1bmUgY2FzZSBuJ2VzdCB2aWRlLCBlbGxlIHJlbnZlcnJhIGxhIHRhaWxsZSBkdSB0YWJsZWF1LCBpZS4gbCdpbmRleCBhcCBsZSBkZXJuaWVyIGVsZW1lbnQKCXsKCQlmb3Ioc2l6ZV90IGkgPSAwIDsgaSA8IG5vZGVzXy5zaXplKCkgOyBpKyspCgkJCS8vZmFpcmUgKytpIGVzdCBwbHVzIHJhcGlkZSBxdWUgaSsrCgkJCS8vcXVhbmQgb24gZmFpdCBpKysgbGUgY29tcGlsYXRldXIgZ2FyZGUgZW4gbcOpbW9pcmUgbGEgdmFsZXVyIGRlIGkgYXZhbnQgaW5jcsOpbWVudGF0aW9uCgkJCS8vKytpIG5lIGdhcmRlIHF1ZSBsYSBub3V2ZWxsZSB2YWxldXIgZW4gbcOpbW9pcmUuCgkJewoJCQlpZihub2Rlc19baV0gPT0gTlVMTCkKCQkJewoJCQkJYnJlYWsgOyAvLyBkw6hzIHF1ZSBsJ29uIHJlbmNvbnRyZSB1bmUgcG9pbnRldXIgTlVMTCBvbiBhcnJldGUgbGEgYm91Y2xlIGV0IG9uIHJlbnZvaWUgc2EgdmFsZXVyCgkJCQlyZXR1cm4gaSA7CgkJCX0KCQl9CgkJcmV0dXJuIG5vZGVzXy5zaXplKCkgOwoJfSAKCQoJLy9Nb2RpZmljYXRldXJzIDoKCgl2b2lkIE5ldDo6YWRkICggTm9kZSogbm9ldWQpCgl7CgkJLy9Db3JyZWN0aW9uIDoKCQkvL2lmKG5vdCBuICkgcmV0dXJuIDsKCQkvL1Blcm1ldCBkZSBzb3J0aXIgZGUgbGEgZm9uY3Rpb24gZGFucyBsZSBjYXMgb3Ugb24gYWpvdXRlcmFpdCB1biBwb2ludGV1ciBOVUxMCgkJLy9JbCBmYXV0IGFqb3V0ZXIgdW4gbWVzc2FnZSBkJ2VycmV1ciBkYW5zIGNlIGNhcy4KCgkJLy9sZSB2ZWN0ZXVyIGV0YW50IHZpZGUgYXUgZMOpcGFydCwgbGUgMWVyIGVsZW1lbnQgYWpvdXTDqSBkb2l0IGV0cmUgcHVzaF9iYWNrIG1hbnVlbGxlbWVudAoJCWlmKG5vZGVzXy5zaXplKCkgPT0gMCkKCQl7CgkJCW5vZGVzXy5wdXNoX2JhY2sobm9ldWQpIDsKCQkJbm9ldWQtPnNldElkKDApOwoJCX0KCQllbHNlLy9zJ2lsIG4nZXN0IHBhcyB2aWRlIG9uIHJlbnRyZSBpY2kKCQl7CgkJCXNpemVfdCBwb3NpdGlvbl9pbnNlcnRpb24gPSBub2V1ZC0+Z2V0SWQoKSA7IC8vIG9uIHLDqWN1cMOocmUgbCdpZCBkdSBub2V1ZCBxdWUgbCdvbiB2ZXV0IGluc8OpcmVyCgkJCS8vb24gcmVnYXJkZSBzaSBsJ2lkIGVzdCBkw6lmaW5pLCBzaSBjZSBuJ2VzdCBwYXMgbGUgY2FzLCBvbiBtZXQgbm90cmUgbm9ldWQgYSBsYSBwcmVtaWVyZSBwbGFjZSBkaXNwbwoJCQkKCQkJaWYocG9zaXRpb25faW5zZXJ0aW9uID09IE5vZGU6Om5vaWQpCgkJCXsKCQkJCS8vb24gYXVyYWl0IHB1IHV0aWxpc2VyIGxhIGZvbmN0aW9uIGdldElkIHBvdXIgc2ltcGxpZmllciBjZSBib3JkZWwKCQkJCWZvcihzaXplX3QgaSA9IDAgOyBpIDwgbm9kZXNfLnNpemUoKSA7IGkrKykKCQkJCXsKCQkJCQlpZihub2Rlc19baV0gPT0gTlVMTCkKCQkJCQl7CgkJCQkJCW5vZGVzX1tpXSA9IG5vZXVkIDsKCQkJCQkJbm9ldWQtPnNldElkKGkpIDsKCQkJCQkJZXhpdCgwKSA7CgkJCQkJfQoJCQkJfQoJCQkJbm9kZXNfLnB1c2hfYmFjayhub2V1ZCkgOwoJCQkJbm9ldWQtPnNldElkKG5vZGVzXy5zaXplKCktMSkgOwoJCQkJCgkJCX0KCQkJZWxzZQoJCQl7CgkJCQkvKgoJCQkJT24gdmEgaW5zw6lyZXIgdW4gbm9ldWQgw6AgbGEgcG9zaXRpb24gcG9zaXRpb25faW5zZXJ0aW9uIGRlIG5vdHJlIHZlY3RldXIgbm9kZXNfLgoJCQkJU2kgbGEgcG9zaXRpb24gZXhpc3RlIGTDqWphLCBvbiBpbnPDqHJlIMOgIGNldHRlIHBvc2l0aW9uIGVuIHbDqXJpZmlhbnQgcXVlIHJpZW4gbidlc3QgZMOpasOgIMOpY3JpdCDDoCBjZXR0ZSBlbXBsYWNlbWVudAoJCQkJU2lub24gc2kgY2V0dGUgcG9zaXRpb24gbidleGlzdGUgcGFzLCBvbiB2YSBwdXNoX2JhY2soTlVMTCkganVzcXUnw6AgY3LDqWVyIGwnZW1wbGFjZW1lbnQgcXVlIGwnb24gdmV1dAoJCQkJKi8KCQkJCWlmKHBvc2l0aW9uX2luc2VydGlvbiA8IG5vZGVzXy5zaXplKCkpCgkJCQl7CgkJCQkJaWYobm9kZXNfW3Bvc2l0aW9uX2luc2VydGlvbl0gPT0gTlVMTCkKCQkJCQl7CgkJCQkJCW5vZGVzX1twb3NpdGlvbl9pbnNlcnRpb25dID0gbm9ldWQgOyAKCQkJCQl9CgkJCQkJZWxzZQoJCQkJCXsKCQkJCQkJY2VyciA8PCJFcnJldXIgbGUgbm9ldWQgZXN0IGTDqWrDoCBvY2N1cMOpLCBtZXJjaSBkJ2VuIGNob2lzaXIgdW4gYXV0cmUiIDw8IGVuZGwgOwoJCQkJCX0KCQkJCX0KCQkJCWVsc2UKCQkJCXsKCQkJCQl3aGlsZShub2Rlc18uc2l6ZSgpICE9IHBvc2l0aW9uX2luc2VydGlvbikKCQkJCQl7CgkJCQkJCW5vZGVzXy5wdXNoX2JhY2soTlVMTCkgOwoJCQkJCX0KCQkJCQlub2Rlc18ucHVzaF9iYWNrKG5vZXVkKSA7CgkJCQl9CgkJCX0KCQl9CgkJCgkJCgl9Cglib29sIE5ldDo6cmVtb3ZlKCBOb2RlKiBub2V1ZCkKCXsKCQlzaXplX3QgaWQgPSBub2V1ZC0+Z2V0SWQoKSA7IC8vIG9uIHLDqWN1cMOocmUgbCdpbmRpY2UgZHUgbm9ldWQgZGFucyBub2Rlc18KCQlub2Rlc18uZXJhc2Uobm9kZXNfLmJlZ2luKCkraWQpIDsKCQlyZXR1cm4gMCA7Cgl9CgoJdm9pZCBOZXQ6OnRvWG1sKG9zdHJlYW0mIG9zKQoJewoJCWV4dGVybiBJbmRlbnRhdGlvbiBpbmRlbnQgOwoJCW9zPDxpbmRlbnQ8PCI8bmV0IG5hbWU9XCIiPDx0aGlzLT5nZXROYW1lKCk8PCJcIiB0eXBlPVwiIjw8VGVybTo6dG9TdHJpbmcodGhpcy0+Z2V0VHlwZSgpKTw8IlwiLz5cbiI7Ly9vbiBhZmZpY2hlIHRvdXMgbGVzIG5ldHMgZGUgbGEgQ2VsbAoJfQoKCU5ldCogTmV0Ojpmcm9tWG1sKENlbGwqIGNlbGx1bGUsIHhtbFRleHRSZWFkZXJQdHIgcmVhZGVyKQoJewoJCXN0ZDo6c3RyaW5nIG5hbWUgPSB4bWxDaGFyVG9TdHJpbmcoeG1sVGV4dFJlYWRlckdldEF0dHJpYnV0ZShyZWFkZXIsIChjb25zdCB4bWxDaGFyKikibmFtZSIpKSA7CgkJc3RkOjpzdHJpbmcgdHlwZV9zdHJpbmcgPSB4bWxDaGFyVG9TdHJpbmcoeG1sVGV4dFJlYWRlckdldEF0dHJpYnV0ZShyZWFkZXIsIChjb25zdCB4bWxDaGFyKikidHlwZSIpKSA7CgkJCgkJY291dCA8PCJOYW1lLmVtdHB5IDogIiA8PCBuYW1lLmVtcHR5KCkgPDwgZW5kbCA7CgkJY291dCA8PCJ0eXBlLmVtdHB5IDogIiA8PCB0eXBlX3N0cmluZy5lbXB0eSgpIDw8IGVuZGwgOyAKCQkKCQlpZihub3QobmFtZS5lbXB0eSgpIG9yIHR5cGVfc3RyaW5nLmVtcHR5KCkpKQoJCXsKCQkJVGVybTo6VHlwZSB0eXBlID0gVGVybTo6dG9UeXBlKHR5cGVfc3RyaW5nKSA7CgkJCU5ldCogbmV0ID0gbmV3IE5ldChjZWxsdWxlLCBuYW1lLCB0eXBlKSA7CgkJCQoJCQljb25zdCB4bWxDaGFyKiBub2RlVGFnID0geG1sVGV4dFJlYWRlckNvbnN0U3RyaW5nKCByZWFkZXIsIChjb25zdCB4bWxDaGFyKikibm9kZSIgKTsKCQkJaW50IGogPSAwIDsKCQkJd2hpbGUodHJ1ZSkKCQkJewoJCQkJCWNlcnI8PCIJTm9tYnJlIGRlIHRvdXIgZGUgd2hpbGUgZGFucyBuZXQgOiAiIDw8IGogPDxlbmRsIDsKCgkJCQkgIHhtbFRleHRSZWFkZXJSZWFkKHJlYWRlcik7CgoJCQkgICAgICBzd2l0Y2ggKCB4bWxUZXh0UmVhZGVyTm9kZVR5cGUocmVhZGVyKSApIAoJCQkgICAgICB7CgkJCSAgICAgICAgLy94bWxUZXh0UmVhZGVyTm9kZVR5cGUgcsOpY3Vww6hyZSBsZSB0eXBlIGR1IG5vZXVkIGFjdHVlbAoJCQkgICAgICAgIC8vY2EgcmV0b3VybmUgbGUgdHlwZSBkdSBub2V1ZCBvdSAtMSBlbiBjYXMgZCdlcnJldXIKCgkJCSAgICAgICAgY2FzZSBYTUxfUkVBREVSX1RZUEVfQ09NTUVOVDoKCQkJICAgICAgICAgIC8vc2kgb24gZXN0IGRlIHR5cGUgY29tbWVudGFpcmUgb24gbmUgZmFpdCByaWVuCgkJCSAgICAgICAgY2FzZSBYTUxfUkVBREVSX1RZUEVfV0hJVEVTUEFDRToKCQkJICAgICAgICAgIC8vc2kgb24gZXN0IGRlIHR5cGUgZXNwYWNlIG9uIG5lIGZhaXQgcmllbgoJCQkgICAgICAgIGNhc2UgWE1MX1JFQURFUl9UWVBFX1NJR05JRklDQU5UX1dISVRFU1BBQ0U6CgkJCSAgICAgICAgICAvL3NpIG9uIGVzdCBkZSB0eXBlICJlc3BhY2Ugc2lnbmlmaWNhdGlmIiBvbiBuZSBmYWl0IHJpZW4KCQkJICAgICAgICAgIGNvbnRpbnVlOwoJCQkgICAgICB9CgoJCQkgICAgICBjb25zdCB4bWxDaGFyKiBub2RlTmFtZSA9IHhtbFRleHRSZWFkZXJDb25zdExvY2FsTmFtZSggcmVhZGVyICk7CgoJCQkgICAgaWYgKChub2RlTmFtZSA9PW5vZGVUYWcgKSkgICAgICAgICAgCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAJaisrIDsKICAgICAgICAgICAgICAgICAgICBOb2RlOjpmcm9tWG1sKG5ldCxyZWFkZXIpOwogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGJyZWFrOyAgICAgICAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAoKCQkJfSAKCgkJCXJldHVybiBuZXQgOwoJCX0KCQllbHNlCgkJewoJCQlpZihuYW1lLmVtcHR5KCkpCgkJCXsKCQkJCWNlcnIgPDwgIm5hbWUgaXMgZW1wdHkiIDw8ZW5kbCA7CgkJCX0KCQkJaWYgKHR5cGVfc3RyaW5nLmVtcHR5KCkpCgkJCXsKCQkJCWNlcnIgPDwgIlR5cGUgaXMgZW1wdHkiIDw8IGVuZGwgOwoJCQl9CgkJCWNlcnI8PCAiSW1wb3NzaWJsZSBkZSByw6ljdXDDqXJlciBsZXMgbmV0cyBjb3JyZWN0ZW1lbnQiPDxlbmRsIDsKCQkJZXhpdCgwKSA7CgkJfQoJCQoJfQoJCn0AAAAAAAAAAAMWAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					2,
					"left_delete",
					null,
					"AgAAAHAPAAAAAAAAcA8AAAAAAABwAAAACQkKCQljb3V0IDw8Ik5hbWUuZW10cHkgOiAiIDw8IG5hbWUuZW1wdHkoKSA8PCBlbmRsIDsKCQljb3V0IDw8InR5cGUuZW10cHkgOiAiIDw8IHR5cGVfc3RyaW5nLmVtcHR5KCkgPDwgZW5kbCA7IG8PAAAAAAAAbw8AAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgDwAAAAAAAHAPAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAAC3FQAAI2luY2x1ZGUgIk5ldC5oIgoKI2luY2x1ZGUgIkNlbGwuaCIKI2luY2x1ZGUgIk5vZGUuaCIKI2luY2x1ZGUgIlRlcm0uaCIKI2luY2x1ZGUgIlBvaW50LmgiCiNpbmNsdWRlICJJbmRlbnRhdGlvbi5oIgojaW5jbHVkZSAiWG1sVXRpbC5oIgoKbmFtZXNwYWNlIE5ldGxpc3QKewoJCgoJTmV0OjpOZXQoQ2VsbCogY2VsbHVsZSAsIGNvbnN0IHN0ZDo6c3RyaW5nJiBuYW1lLCBUZXJtOjpUeXBlIGRpcikgCgkJOiBvd25lcl8gKGNlbGx1bGUpLAoJCSAgbmFtZV8obmFtZSksCgkJICBpZF8oY2VsbHVsZS0+bmV3TmV0SWQoKSksCgkJICB0eXBlXyhkaXIpLAoJCSAgbm9kZXNfKCkgLy9vbiB2ZXV0IHVuIHZlY3RldXIgdmlkZSDDoCBsJ2luaWFsaXNhdGlvbgoJewoJCS8vIG9uIGFqb3V0ZSBsZSBub2V1ZCBjcsOpZXIgYXUgbml2ZWF1IGRlIGxhIENlbGwKCQljZWxsdWxlLT5hZGQodGhpcykgOwoJfQoJCglOZXQ6On5OZXQoKQoJewoJCS8vUXVhbmQgb24gc3VwcHJpbWUgdW4gbmV0IGlsIGZhdXQgZMOpdGFjaGVyIHRvdXMgbGVzIG5vZGVzIHF1aSBsdWkgc29udCBjb25uZWN0w6lzCgkJLy9JbCBmYXV0IMOpZ2FsZW1lbnQgbWV0dHJlIGwnYXR0cmlidXQgbmV0XyBkZXMgVGVybXMgw6AgTlVMTAoJCWZvcihzaXplX3QgaSA9IDAgOyBpIDwgbm9kZXNfLnNpemUoKTsgaSsrKQoJCXsKCQkJLy9ub2Rlc19baV0gOiBOb2RlKgoJCQkvL25vZGVzX1tpXS0+Z2V0VGVybSgpIDogVGVybSoKCQkJLy8obm9kZXNfW2ldLT5nZXRUZXJtKCkpLT5zZXROZXQoTlVMTCkgOiBUZXJtOjpuZXRfID1OVUxMCgkJCShub2Rlc19baV0tPmdldFRlcm0oKSktPnNldE5ldChOVUxMKSA7CgkJCW5vZGVzXy5wb3BfYmFjaygpIDsKCQl9CgkJb3duZXJfLT5yZW1vdmUodGhpcykgOyAvL29uIHJldGlyZSBsZSBuZXQgZGUgc2EgY2VsbAoJfQoJc2l6ZV90IE5ldDo6Z2V0RnJlZU5vZGVJZCgpIGNvbnN0IC8vIHJlbnZlcnJhIGwnaW5kZXggZGUgbGEgcHJlbWllcmUgY2FzZSBsaWJyZSBkYW5zIGxlIHRhYmxlYXUgbm9kZXNfLCBzaSBhdWN1bmUgY2FzZSBuJ2VzdCB2aWRlLCBlbGxlIHJlbnZlcnJhIGxhIHRhaWxsZSBkdSB0YWJsZWF1LCBpZS4gbCdpbmRleCBhcCBsZSBkZXJuaWVyIGVsZW1lbnQKCXsKCQlmb3Ioc2l6ZV90IGkgPSAwIDsgaSA8IG5vZGVzXy5zaXplKCkgOyBpKyspCgkJCS8vZmFpcmUgKytpIGVzdCBwbHVzIHJhcGlkZSBxdWUgaSsrCgkJCS8vcXVhbmQgb24gZmFpdCBpKysgbGUgY29tcGlsYXRldXIgZ2FyZGUgZW4gbcOpbW9pcmUgbGEgdmFsZXVyIGRlIGkgYXZhbnQgaW5jcsOpbWVudGF0aW9uCgkJCS8vKytpIG5lIGdhcmRlIHF1ZSBsYSBub3V2ZWxsZSB2YWxldXIgZW4gbcOpbW9pcmUuCgkJewoJCQlpZihub2Rlc19baV0gPT0gTlVMTCkKCQkJewoJCQkJYnJlYWsgOyAvLyBkw6hzIHF1ZSBsJ29uIHJlbmNvbnRyZSB1bmUgcG9pbnRldXIgTlVMTCBvbiBhcnJldGUgbGEgYm91Y2xlIGV0IG9uIHJlbnZvaWUgc2EgdmFsZXVyCgkJCQlyZXR1cm4gaSA7CgkJCX0KCQl9CgkJcmV0dXJuIG5vZGVzXy5zaXplKCkgOwoJfSAKCQoJLy9Nb2RpZmljYXRldXJzIDoKCgl2b2lkIE5ldDo6YWRkICggTm9kZSogbm9ldWQpCgl7CgkJLy9Db3JyZWN0aW9uIDoKCQkvL2lmKG5vdCBuICkgcmV0dXJuIDsKCQkvL1Blcm1ldCBkZSBzb3J0aXIgZGUgbGEgZm9uY3Rpb24gZGFucyBsZSBjYXMgb3Ugb24gYWpvdXRlcmFpdCB1biBwb2ludGV1ciBOVUxMCgkJLy9JbCBmYXV0IGFqb3V0ZXIgdW4gbWVzc2FnZSBkJ2VycmV1ciBkYW5zIGNlIGNhcy4KCgkJLy9sZSB2ZWN0ZXVyIGV0YW50IHZpZGUgYXUgZMOpcGFydCwgbGUgMWVyIGVsZW1lbnQgYWpvdXTDqSBkb2l0IGV0cmUgcHVzaF9iYWNrIG1hbnVlbGxlbWVudAoJCWlmKG5vZGVzXy5zaXplKCkgPT0gMCkKCQl7CgkJCW5vZGVzXy5wdXNoX2JhY2sobm9ldWQpIDsKCQkJbm9ldWQtPnNldElkKDApOwoJCX0KCQllbHNlLy9zJ2lsIG4nZXN0IHBhcyB2aWRlIG9uIHJlbnRyZSBpY2kKCQl7CgkJCXNpemVfdCBwb3NpdGlvbl9pbnNlcnRpb24gPSBub2V1ZC0+Z2V0SWQoKSA7IC8vIG9uIHLDqWN1cMOocmUgbCdpZCBkdSBub2V1ZCBxdWUgbCdvbiB2ZXV0IGluc8OpcmVyCgkJCS8vb24gcmVnYXJkZSBzaSBsJ2lkIGVzdCBkw6lmaW5pLCBzaSBjZSBuJ2VzdCBwYXMgbGUgY2FzLCBvbiBtZXQgbm90cmUgbm9ldWQgYSBsYSBwcmVtaWVyZSBwbGFjZSBkaXNwbwoJCQkKCQkJaWYocG9zaXRpb25faW5zZXJ0aW9uID09IE5vZGU6Om5vaWQpCgkJCXsKCQkJCS8vb24gYXVyYWl0IHB1IHV0aWxpc2VyIGxhIGZvbmN0aW9uIGdldElkIHBvdXIgc2ltcGxpZmllciBjZSBib3JkZWwKCQkJCWZvcihzaXplX3QgaSA9IDAgOyBpIDwgbm9kZXNfLnNpemUoKSA7IGkrKykKCQkJCXsKCQkJCQlpZihub2Rlc19baV0gPT0gTlVMTCkKCQkJCQl7CgkJCQkJCW5vZGVzX1tpXSA9IG5vZXVkIDsKCQkJCQkJbm9ldWQtPnNldElkKGkpIDsKCQkJCQkJZXhpdCgwKSA7CgkJCQkJfQoJCQkJfQoJCQkJbm9kZXNfLnB1c2hfYmFjayhub2V1ZCkgOwoJCQkJbm9ldWQtPnNldElkKG5vZGVzXy5zaXplKCktMSkgOwoJCQkJCgkJCX0KCQkJZWxzZQoJCQl7CgkJCQkvKgoJCQkJT24gdmEgaW5zw6lyZXIgdW4gbm9ldWQgw6AgbGEgcG9zaXRpb24gcG9zaXRpb25faW5zZXJ0aW9uIGRlIG5vdHJlIHZlY3RldXIgbm9kZXNfLgoJCQkJU2kgbGEgcG9zaXRpb24gZXhpc3RlIGTDqWphLCBvbiBpbnPDqHJlIMOgIGNldHRlIHBvc2l0aW9uIGVuIHbDqXJpZmlhbnQgcXVlIHJpZW4gbidlc3QgZMOpasOgIMOpY3JpdCDDoCBjZXR0ZSBlbXBsYWNlbWVudAoJCQkJU2lub24gc2kgY2V0dGUgcG9zaXRpb24gbidleGlzdGUgcGFzLCBvbiB2YSBwdXNoX2JhY2soTlVMTCkganVzcXUnw6AgY3LDqWVyIGwnZW1wbGFjZW1lbnQgcXVlIGwnb24gdmV1dAoJCQkJKi8KCQkJCWlmKHBvc2l0aW9uX2luc2VydGlvbiA8IG5vZGVzXy5zaXplKCkpCgkJCQl7CgkJCQkJaWYobm9kZXNfW3Bvc2l0aW9uX2luc2VydGlvbl0gPT0gTlVMTCkKCQkJCQl7CgkJCQkJCW5vZGVzX1twb3NpdGlvbl9pbnNlcnRpb25dID0gbm9ldWQgOyAKCQkJCQl9CgkJCQkJZWxzZQoJCQkJCXsKCQkJCQkJY2VyciA8PCJFcnJldXIgbGUgbm9ldWQgZXN0IGTDqWrDoCBvY2N1cMOpLCBtZXJjaSBkJ2VuIGNob2lzaXIgdW4gYXV0cmUiIDw8IGVuZGwgOwoJCQkJCX0KCQkJCX0KCQkJCWVsc2UKCQkJCXsKCQkJCQl3aGlsZShub2Rlc18uc2l6ZSgpICE9IHBvc2l0aW9uX2luc2VydGlvbikKCQkJCQl7CgkJCQkJCW5vZGVzXy5wdXNoX2JhY2soTlVMTCkgOwoJCQkJCX0KCQkJCQlub2Rlc18ucHVzaF9iYWNrKG5vZXVkKSA7CgkJCQl9CgkJCX0KCQl9CgkJCgkJCgl9Cglib29sIE5ldDo6cmVtb3ZlKCBOb2RlKiBub2V1ZCkKCXsKCQlzaXplX3QgaWQgPSBub2V1ZC0+Z2V0SWQoKSA7IC8vIG9uIHLDqWN1cMOocmUgbCdpbmRpY2UgZHUgbm9ldWQgZGFucyBub2Rlc18KCQlub2Rlc18uZXJhc2Uobm9kZXNfLmJlZ2luKCkraWQpIDsKCQlyZXR1cm4gMCA7Cgl9CgoJdm9pZCBOZXQ6OnRvWG1sKG9zdHJlYW0mIG9zKQoJewoJCWV4dGVybiBJbmRlbnRhdGlvbiBpbmRlbnQgOwoJCW9zPDxpbmRlbnQ8PCI8bmV0IG5hbWU9XCIiPDx0aGlzLT5nZXROYW1lKCk8PCJcIiB0eXBlPVwiIjw8VGVybTo6dG9TdHJpbmcodGhpcy0+Z2V0VHlwZSgpKTw8IlwiLz5cbiI7Ly9vbiBhZmZpY2hlIHRvdXMgbGVzIG5ldHMgZGUgbGEgQ2VsbAoJfQoKCU5ldCogTmV0Ojpmcm9tWG1sKENlbGwqIGNlbGx1bGUsIHhtbFRleHRSZWFkZXJQdHIgcmVhZGVyKQoJewoJCXN0ZDo6c3RyaW5nIG5hbWUgPSB4bWxDaGFyVG9TdHJpbmcoeG1sVGV4dFJlYWRlckdldEF0dHJpYnV0ZShyZWFkZXIsIChjb25zdCB4bWxDaGFyKikibmFtZSIpKSA7CgkJc3RkOjpzdHJpbmcgdHlwZV9zdHJpbmcgPSB4bWxDaGFyVG9TdHJpbmcoeG1sVGV4dFJlYWRlckdldEF0dHJpYnV0ZShyZWFkZXIsIChjb25zdCB4bWxDaGFyKikidHlwZSIpKSA7CgkJCgkJaWYobm90KG5hbWUuZW1wdHkoKSBvciB0eXBlX3N0cmluZy5lbXB0eSgpKSkKCQl7CgkJCVRlcm06OlR5cGUgdHlwZSA9IFRlcm06OnRvVHlwZSh0eXBlX3N0cmluZykgOwoJCQlOZXQqIG5ldCA9IG5ldyBOZXQoY2VsbHVsZSwgbmFtZSwgdHlwZSkgOwoJCQkKCQkJY29uc3QgeG1sQ2hhciogbm9kZVRhZyA9IHhtbFRleHRSZWFkZXJDb25zdFN0cmluZyggcmVhZGVyLCAoY29uc3QgeG1sQ2hhciopIm5vZGUiICk7CgkJCWludCBqID0gMCA7CgkJCXdoaWxlKHRydWUpCgkJCXsKCQkJCQljZXJyPDwiCU5vbWJyZSBkZSB0b3VyIGRlIHdoaWxlIGRhbnMgbmV0IDogIiA8PCBqIDw8ZW5kbCA7CgoJCQkJICB4bWxUZXh0UmVhZGVyUmVhZChyZWFkZXIpOwoKCQkJICAgICAgc3dpdGNoICggeG1sVGV4dFJlYWRlck5vZGVUeXBlKHJlYWRlcikgKSAKCQkJICAgICAgewoJCQkgICAgICAgIC8veG1sVGV4dFJlYWRlck5vZGVUeXBlIHLDqWN1cMOocmUgbGUgdHlwZSBkdSBub2V1ZCBhY3R1ZWwKCQkJICAgICAgICAvL2NhIHJldG91cm5lIGxlIHR5cGUgZHUgbm9ldWQgb3UgLTEgZW4gY2FzIGQnZXJyZXVyCgoJCQkgICAgICAgIGNhc2UgWE1MX1JFQURFUl9UWVBFX0NPTU1FTlQ6CgkJCSAgICAgICAgICAvL3NpIG9uIGVzdCBkZSB0eXBlIGNvbW1lbnRhaXJlIG9uIG5lIGZhaXQgcmllbgoJCQkgICAgICAgIGNhc2UgWE1MX1JFQURFUl9UWVBFX1dISVRFU1BBQ0U6CgkJCSAgICAgICAgICAvL3NpIG9uIGVzdCBkZSB0eXBlIGVzcGFjZSBvbiBuZSBmYWl0IHJpZW4KCQkJICAgICAgICBjYXNlIFhNTF9SRUFERVJfVFlQRV9TSUdOSUZJQ0FOVF9XSElURVNQQUNFOgoJCQkgICAgICAgICAgLy9zaSBvbiBlc3QgZGUgdHlwZSAiZXNwYWNlIHNpZ25pZmljYXRpZiIgb24gbmUgZmFpdCByaWVuCgkJCSAgICAgICAgICBjb250aW51ZTsKCQkJICAgICAgfQoKCQkJICAgICAgY29uc3QgeG1sQ2hhciogbm9kZU5hbWUgPSB4bWxUZXh0UmVhZGVyQ29uc3RMb2NhbE5hbWUoIHJlYWRlciApOwoKCQkJICAgIGlmICgobm9kZU5hbWUgPT1ub2RlVGFnICkpICAgICAgICAgIAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgCWorKyA7CiAgICAgICAgICAgICAgICAgICAgTm9kZTo6ZnJvbVhtbChuZXQscmVhZGVyKTsKICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBicmVhazsgICAgICAgCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKCgkJCX0gCgoJCQlyZXR1cm4gbmV0IDsKCQl9CgkJZWxzZQoJCXsKCQkJaWYobmFtZS5lbXB0eSgpKQoJCQl7CgkJCQljZXJyIDw8ICJuYW1lIGlzIGVtcHR5IiA8PGVuZGwgOwoJCQl9CgkJCWlmICh0eXBlX3N0cmluZy5lbXB0eSgpKQoJCQl7CgkJCQljZXJyIDw8ICJUeXBlIGlzIGVtcHR5IiA8PCBlbmRsIDsKCQkJfQoJCQljZXJyPDwgIkltcG9zc2libGUgZGUgcsOpY3Vww6lyZXIgbGVzIG5ldHMgY29ycmVjdGVtZW50Ijw8ZW5kbCA7CgkJCWV4aXQoMCkgOwoJCX0KCQkKCX0KCQp9AAAAAAAAAAAsFQAAAAAAAAAAAAAAAAAAAAAAACUVAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvDwAAAAAAAG8PAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "Term.cpp",
			"settings":
			{
				"buffer_size": 6142,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\nstd::s"
					},
					"CAAAAFsVAAAAAAAAXBUAAAAAAAAAAAAAXBUAAAAAAABfFQAAAAAAAAAAAABfFQAAAAAAAGAVAAAAAAAAAAAAAGAVAAAAAAAAYRUAAAAAAAAAAAAAYRUAAAAAAABiFQAAAAAAAAAAAABiFQAAAAAAAGMVAAAAAAAAAAAAAGMVAAAAAAAAZBUAAAAAAAAAAAAAZBUAAAAAAABlFQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFsVAAAAAAAAWxUAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "tring"
					},
					"BQAAAGUVAAAAAAAAZhUAAAAAAAAAAAAAZhUAAAAAAABnFQAAAAAAAAAAAABnFQAAAAAAAGgVAAAAAAAAAAAAAGgVAAAAAAAAaRUAAAAAAAAAAAAAaRUAAAAAAABqFQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUVAAAAAAAAZRUAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": " x_"
					},
					"AwAAAGoVAAAAAAAAaxUAAAAAAAAAAAAAaxUAAAAAAABsFQAAAAAAAAAAAABsFQAAAAAAAG0VAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGoVAAAAAAAAahUAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "string"
					},
					"BgAAAG0VAAAAAAAAbhUAAAAAAAAAAAAAbhUAAAAAAABvFQAAAAAAAAAAAABvFQAAAAAAAHAVAAAAAAAAAAAAAHAVAAAAAAAAcRUAAAAAAAAAAAAAcRUAAAAAAAByFQAAAAAAAAAAAAByFQAAAAAAAHMVAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG0VAAAAAAAAbRUAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAHMVAAAAAAAAdBUAAAAAAAAAAAAAdBUAAAAAAAB1FQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHMVAAAAAAAAcxUAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\nstd::st"
					},
					"CQAAAHUVAAAAAAAAdhUAAAAAAAAAAAAAdhUAAAAAAAB5FQAAAAAAAAAAAAB5FQAAAAAAAHoVAAAAAAAAAAAAAHoVAAAAAAAAexUAAAAAAAAAAAAAexUAAAAAAAB8FQAAAAAAAAAAAAB8FQAAAAAAAH0VAAAAAAAAAAAAAH0VAAAAAAAAfhUAAAAAAAAAAAAAfhUAAAAAAAB/FQAAAAAAAAAAAAB/FQAAAAAAAIAVAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUVAAAAAAAAdRUAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "ring"
					},
					"BAAAAIAVAAAAAAAAgRUAAAAAAAAAAAAAgRUAAAAAAACCFQAAAAAAAAAAAACCFQAAAAAAAIMVAAAAAAAAAAAAAIMVAAAAAAAAhBUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIAVAAAAAAAAgBUAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " y"
					},
					"AgAAAIQVAAAAAAAAhRUAAAAAAAAAAAAAhRUAAAAAAACGFQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQVAAAAAAAAhBUAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIYVAAAAAAAAhxUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIYVAAAAAAAAhhUAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAAIYVAAAAAAAAhhUAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIcVAAAAAAAAhxUAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "_string"
					},
					"BwAAAIYVAAAAAAAAhxUAAAAAAAAAAAAAhxUAAAAAAACIFQAAAAAAAAAAAACIFQAAAAAAAIkVAAAAAAAAAAAAAIkVAAAAAAAAihUAAAAAAAAAAAAAihUAAAAAAACLFQAAAAAAAAAAAACLFQAAAAAAAIwVAAAAAAAAAAAAAIwVAAAAAAAAjRUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIYVAAAAAAAAhhUAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAI0VAAAAAAAAjhUAAAAAAAAAAAAAjhUAAAAAAACPFQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI0VAAAAAAAAjRUAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "\t\t\t"
					},
					"AwAAAIUVAAAAAAAAhhUAAAAAAAAAAAAAhhUAAAAAAACHFQAAAAAAAAAAAACHFQAAAAAAAIgVAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUVAAAAAAAAhRUAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "\t\t\t"
					},
					"AwAAAGsVAAAAAAAAbBUAAAAAAAAAAAAAbBUAAAAAAABtFQAAAAAAAAAAAABtFQAAAAAAAG4VAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGsVAAAAAAAAaxUAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "\t\t\t"
					},
					"AwAAAPQUAAAAAAAA9RQAAAAAAAAAAAAA9RQAAAAAAAD2FAAAAAAAAAAAAAD2FAAAAAAAAPcUAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQUAAAAAAAA9BQAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "\t\t\t"
					},
					"AwAAAIkUAAAAAAAAihQAAAAAAAAAAAAAihQAAAAAAACLFAAAAAAAAAAAAACLFAAAAAAAAIwUAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIkUAAAAAAAAiRQAAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "\t\t\t"
					},
					"AwAAAJYUAAAAAAAAlxQAAAAAAAAAAAAAlxQAAAAAAACYFAAAAAAAAAAAAACYFAAAAAAAAJkUAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJYUAAAAAAAAlhQAAAAAAAAAAAAAAADwvw"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAA4VAAAAAAAADxUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4VAAAAAAAADhUAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "\t\t\t"
					},
					"AwAAAIEVAAAAAAAAghUAAAAAAAAAAAAAghUAAAAAAACDFQAAAAAAAAAAAACDFQAAAAAAAIQVAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEVAAAAAAAAgRUAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "\t\t\t"
					},
					"AwAAAKEVAAAAAAAAohUAAAAAAAAAAAAAohUAAAAAAACjFQAAAAAAAAAAAACjFQAAAAAAAKQVAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKEVAAAAAAAAoRUAAAAAAAAAAAAAAADwvw"
				],
				[
					52,
					1,
					"paste",
					null,
					"AQAAAIUVAAAAAAAA2RUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUVAAAAAAAAhRUAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIUVAAAAAAAAhhUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUVAAAAAAAAhRUAAAAAAAAAAAAAAADwvw"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPoVAAAAAAAA+xUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoVAAAAAAAA+hUAAAAAAAAAAAAAAADwvw"
				],
				[
					59,
					1,
					"paste",
					null,
					"AQAAAPsVAAAAAAAATxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsVAAAAAAAA+xUAAAAAAAAAAAAAAADwvw"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AgAAAMsVAAAAAAAAzBUAAAAAAAAAAAAAzBUAAAAAAADMFQAAAAAAAAkAAABkaXJlY3Rpb24",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQVAAAAAAAAyxUAAAAAAAAAAAAAAADwvw"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AgAAADgWAAAAAAAAORYAAAAAAAAAAAAAORYAAAAAAAA5FgAAAAAAAAkAAABkaXJlY3Rpb24",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADgWAAAAAAAAQRYAAAAAAAAAAAAAAADwvw"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "\nterm->"
					},
					"CAAAAPQWAAAAAAAA9RYAAAAAAAAAAAAA9RYAAAAAAAD6FgAAAAAAAAAAAAD6FgAAAAAAAPsWAAAAAAAAAAAAAPsWAAAAAAAA/BYAAAAAAAAAAAAA/BYAAAAAAAD9FgAAAAAAAAAAAAD9FgAAAAAAAP4WAAAAAAAAAAAAAP4WAAAAAAAA/xYAAAAAAAAAAAAA/xYAAAAAAAAAFwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQWAAAAAAAA9BYAAAAAAAAAAAAAAADwvw"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "set"
					},
					"AwAAAAAXAAAAAAAAARcAAAAAAAAAAAAAARcAAAAAAAACFwAAAAAAAAAAAAACFwAAAAAAAAMXAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAXAAAAAAAAABcAAAAAAAAAAAAAAADwvw"
				],
				[
					77,
					1,
					"insert_completion",
					{
						"completion": "setPosition",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "setPosition"
					},
					"AgAAAAAXAAAAAAAAABcAAAAAAAADAAAAc2V0ABcAAAAAAAALFwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMXAAAAAAAAAxcAAAAAAAAAAAAAAADwvw"
				],
				[
					78,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAsXAAAAAAAADRcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAsXAAAAAAAACxcAAAAAAAAAAAAAAADwvw"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "stoi"
					},
					"BAAAAAwXAAAAAAAADRcAAAAAAAAAAAAADRcAAAAAAAAOFwAAAAAAAAAAAAAOFwAAAAAAAA8XAAAAAAAAAAAAAA8XAAAAAAAAEBcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwXAAAAAAAADBcAAAAAAAAAAAAAAADwvw"
				],
				[
					82,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABAXAAAAAAAAEhcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABAXAAAAAAAAEBcAAAAAAAAAAAAAAADwvw"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AQAAABEXAAAAAAAAEhcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABEXAAAAAAAAERcAAAAAAAAAAAAAAADwvw"
				],
				[
					87,
					1,
					"insert_completion",
					{
						"completion": "x_string",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "x_string"
					},
					"AgAAABEXAAAAAAAAERcAAAAAAAABAAAAeBEXAAAAAAAAGRcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABIXAAAAAAAAEhcAAAAAAAAAAAAAAADwvw"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": ",y"
					},
					"AgAAABkXAAAAAAAAGhcAAAAAAAAAAAAAGhcAAAAAAAAbFwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkXAAAAAAAAGRcAAAAAAAAAAAAAAADwvw"
				],
				[
					89,
					1,
					"insert_completion",
					{
						"completion": "y_string",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "y_string"
					},
					"AgAAABoXAAAAAAAAGhcAAAAAAAABAAAAeRoXAAAAAAAAIhcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsXAAAAAAAAGxcAAAAAAAAAAAAAAADwvw"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAABkXAAAAAAAAGhcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkXAAAAAAAAGRcAAAAAAAAAAAAAAADwvw"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "stoi-"
					},
					"BQAAABsXAAAAAAAAHBcAAAAAAAAAAAAAHBcAAAAAAAAdFwAAAAAAAAAAAAAdFwAAAAAAAB4XAAAAAAAAAAAAAB4XAAAAAAAAHxcAAAAAAAAAAAAAHxcAAAAAAAAgFwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsXAAAAAAAAGxcAAAAAAAAAAAAAAADwvw"
				],
				[
					94,
					1,
					"left_delete",
					null,
					"AQAAAB8XAAAAAAAAHxcAAAAAAAABAAAALQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACAXAAAAAAAAIBcAAAAAAAAAAAAAAADwvw"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAB8XAAAAAAAAIBcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB8XAAAAAAAAHxcAAAAAAAAAAAAAAADwvw"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": " ;"
					},
					"AgAAACoXAAAAAAAAKxcAAAAAAAAAAAAAKxcAAAAAAAAsFwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACoXAAAAAAAAKhcAAAAAAAAAAAAAAADwvw"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": "<<"
					},
					"AgAAACsUAAAAAAAALBQAAAAAAAAAAAAALBQAAAAAAAAtFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACsUAAAAAAAAKxQAAAAAAAAAAAAAAADwvw"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "\"<<"
					},
					"AwAAAC0UAAAAAAAALhQAAAAAAAAAAAAALhQAAAAAAAAvFAAAAAAAAAAAAAAvFAAAAAAAADAUAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC0UAAAAAAAALRQAAAAAAAAAAAAAAADwvw"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAC4UAAAAAAAALxQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC4UAAAAAAAALhQAAAAAAAAAAAAAAADwvw"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "\\"
					},
					"AQAAAC4UAAAAAAAALxQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC4UAAAAAAAALhQAAAAAAAAAAAAAAADwvw"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAADAUAAAAAAAAMRQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADAUAAAAAAAAMBQAAAAAAAAAAAAAAADwvw"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AQAAADMUAAAAAAAANBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADMUAAAAAAAAMxQAAAAAAAAAAAAAAADwvw"
				],
				[
					130,
					1,
					"left_delete",
					null,
					"AQAAADMUAAAAAAAAMxQAAAAAAAABAAAAeA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADQUAAAAAAAANBQAAAAAAAAAAAAAAADwvw"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "\"x"
					},
					"AgAAADMUAAAAAAAANBQAAAAAAAAAAAAANBQAAAAAAAA1FAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADMUAAAAAAAAMxQAAAAAAAAAAAAAAADwvw"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": "=\""
					},
					"AgAAADUUAAAAAAAANhQAAAAAAAAAAAAANhQAAAAAAAA3FAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADUUAAAAAAAANRQAAAAAAAAAAAAAAADwvw"
				],
				[
					135,
					1,
					"left_delete",
					null,
					"AQAAADYUAAAAAAAANhQAAAAAAAABAAAAIg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADcUAAAAAAAANxQAAAAAAAAAAAAAAADwvw"
				],
				[
					140,
					1,
					"paste",
					null,
					"AgAAACsUAAAAAAAAiRQAAAAAAAAAAAAAiRQAAAAAAACJFAAAAAAAABcAAAA8PCJcIiI8PCJ4PTw8IlwiLz5cbiIgOw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEIUAAAAAAAAKxQAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "Instance.h",
			"settings":
			{
				"buffer_size": 2240,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nDebugger\n--------\n\n  For getting set up see https://github.com/daveleroy/sublime_debugger\n\n\n  Version 0.5.3\n\n  - Tool tips when hovering over debugger controls\n  - Moved Debugger menu item into tools -> Debugger\n  - Improved json schema support for auto completeing adapter configurations (requires LSP-json)\n  - Fixes node json schema contributions\n  - Fixes issue with installing the php adapter\n  - Fixes issues with localized pacakages and json schema/snippets\n  - Fixes issue with external terminal on mac\n\n\n  Version 0.5.2\n\n  - Disable winpty on Windows (needs to be rebuilt for python 3.8)\n\n\n  Version 0.5.1\n\n  - Fixes 64/32 bit windows importing the wrong winpyty versions\n\n\n  Version 0.5.0\n\n  - python: Allow module launch configurations (@anergictcell)\n  - lldb: fixes issue with toggle disassembly\n  - ruby: added adapter (requires readapt)\n\n  - The install adapter menu now checks installed adapters for updates (for most adapters)\n  - The install adapter menu now has a link to each adapters documentations\n\n  - Added 'Debugger: Clear Breakpoints' command that clears all breakpoints\n\n  - Support for exception breakpoint filter conditions (not all adapters support this)\n  - Support for debug session hierarchies which is going to be required for some complex adapter setups such as vscode-debug-js\n  - Support the \"clipboard\" context when copying a variables value\n\n  - When expanding a variable display a loading indicator when the variables children are fetched.\n  - Show error message inline when expanding a variable fails\n  - Allow expanding/collapsing a debug session\n  - Improved handling of stack frames that marked as labels\n  - Improved handling of stack frames that are marked as deemphasized or their source is deemphasized\n  - Fixes integrated terminal\n\n  For a full list of changes see https://github.com/daveleroy/sublime_debugger/commits\n\n\n  Version 0.4.1\n\n  - Adds explicit font setting for debugger panel\n\n\n  Version 0.4.0\n\n  - debugger_configuration replaces debug.configurations and is now defined at the root of the .sublime-project instead of inside settings\n  - Adds support for tasks see https://github.com/daveleroy/sublime_debugger#tasks\n  - Adds support for pre_debug_task and post_debug_task which can be used to build etc\n  - Adds schema support for LSP-json for auto completeing adapter configurations (see https://github.com/sublimelsp/LSP-json)\n  - Improvements to lldb adapter adding toggle disassembly, display options, dereference options\n  - Clicking a terminal panel when already selected now shows an output panel with the entire contents\n  - Renamed a bunch of commands (so if you bound any commands check them)\n  - Node adapter now has snippets\n  - Fixes issues with latest release of lldb adapter\n  - Fixes default ui scale accross platforms\n\n\n  Version 0.3.1\n\n  - Fixes issue with sizing and alignment of panels on windows\n  - Fixes path of go adapter\n\n\n  Version 0.3.0\n\n  - Initial support for multiple debug sessions\n  - Use debugpy instead of ptvsd for python adapter\n  - Right align line numbers in variables/callstack panel\n  - Improved layout of panels\n\n\n  Version 0.2.3\n\n  - Updates path for lldb\n\n\n  Version 0.2.3\n\n  - Updates path for lldb\n\n\n  Version 0.2.2\n\n  - Show dialog with error message when launching fails (to match vscode)\n  - In multi-threaded programs the reason for why a specific thread was stopped is now only displayed on that thread even if all threads were stopped\n  - If running a build with `sublime_build` in the configuration don't start debugging if the build fails with an exit code\n  - Fixes issue with pause not working\n  - Fixes rendering performance regression\n  - Fixes gutter icons on windows\n\n\n  Version 0.2.1\n\n  - Debugging with a single thread now just displays the stack frames without the thread header\n  - When launching a configuration and the adapter is not installed offer to install it\n  - When auto selecting a stack frame prefer the first none subtle stack frame\n  - Fixes call stack layout when encountering long stack frame names\n  - Fixes various issues with multi threaded debugging\n  - Fixes hover providers\n\n\n  Version 0.2.0\n\n  - Support for column breakpoints (requires adapter support)\n  - Support for data breakpoints (requires adapter support, currently only lldb?)\n  - Left-click gutter now toggles breakpoints, right-clicking a breakpoint allows editing/advanced options\n  - Watch expressions\n  - Loaded Modules/Sources panels\n  - Adds Node debug adapter (@appelgriebsch)\n  - External terminal support. Terminal on Mac (Needs support for Windows/Linux) or Sublime's Terminus package.\n  - Integrated terminal now strips ascii control sequences \n  - Settings button\n  - Show currently installed version of an adapter, show download progress when installing an adapter\n  - Fixes issues that sometimes occurred installing/reinstalling adapters\n  - Fixes issues with reloading plugin\n\n\n  Version 0.1.8\n\n  - Fixes core not defined error\n\n\n  Version 0.1.7\n\n  - Allow setting logging options in settings\n  - Updated url for vscode-firefox-debugger (@appelgriebsch)\n  - Fixes issue preventing Debugger: Install Adapters from being run from the command palette\n  - Fixes issue where some debug adapters were failing to be fully unzipped on Windows because of long paths\n\n\n  Version 0.1.6\n\n  - Adds run to cursor command\n  - Fixes issue preventing installing debug adapters\n\n\n  Version 0.1.5\n\n  - Fixes issue that prevented debugging on windows\n\n\n  Version 0.1.4\n\n  - New styling of panels and updated layout to better support temporary panels created for build results/integrated terminal (and in the future allow customizing the layout of the panels)\n  - New console rendering code to support text wrapping and build results/integrated terminal\n  - Support internal terminal requests to allow program input. Requires configuration changes to use this feature which depends on the adapter in question. (LLVM uses \"terminal\": \"integrated\")\n  - Allow defining platform specific configuration settings with a top level object called \"linux\", \"osx\", or \"windows\" in your configuration. Same as vscode \n  - Fixes issue where hover providers/autocomplete/run command was not working for some debug adapters \n  - Fixes issue where using $file and other variables in a configuration had their values expanded when the debugger was opened not when the debugger was started\n  - Fixes some wonkiness that occurred when stepping the debugger that caused it to not update correctly\n\n\n  Version 0.1.3\n\n  - When attempting to open the debugger in a window without a sublime project prompt the user to create one.\n  - Fixes some other minor bugs and configuration issues\n\n\n  Version 0.1.0\n\n  - Adds package control support",
			"settings":
			{
				"buffer_size": 6767,
				"line_ending": "Windows",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "Package Control Messages\n========================\n\nDebugger\n--------\n\n  For getting set up see https://github.com/daveleroy/sublime_debugger\n\n\n  Version 0.5.3\n\n  - Tool tips when hovering over debugger controls\n  - Moved Debugger menu item into tools -> Debugger\n  - Improved json schema support for auto completeing adapter configurations (requires LSP-json)\n  - Fixes node json schema contributions\n  - Fixes issue with installing the php adapter\n  - Fixes issues with localized pacakages and json schema/snippets\n  - Fixes issue with external terminal on mac\n\n\n  Version 0.5.2\n\n  - Disable winpty on Windows (needs to be rebuilt for python 3.8)\n\n\n  Version 0.5.1\n\n  - Fixes 64/32 bit windows importing the wrong winpyty versions\n\n\n  Version 0.5.0\n\n  - python: Allow module launch configurations (@anergictcell)\n  - lldb: fixes issue with toggle disassembly\n  - ruby: added adapter (requires readapt)\n\n  - The install adapter menu now checks installed adapters for updates (for most adapters)\n  - The install adapter menu now has a link to each adapters documentations\n\n  - Added 'Debugger: Clear Breakpoints' command that clears all breakpoints\n\n  - Support for exception breakpoint filter conditions (not all adapters support this)\n  - Support for debug session hierarchies which is going to be required for some complex adapter setups such as vscode-debug-js\n  - Support the \"clipboard\" context when copying a variables value\n\n  - When expanding a variable display a loading indicator when the variables children are fetched.\n  - Show error message inline when expanding a variable fails\n  - Allow expanding/collapsing a debug session\n  - Improved handling of stack frames that marked as labels\n  - Improved handling of stack frames that are marked as deemphasized or their source is deemphasized\n  - Fixes integrated terminal\n\n  For a full list of changes see https://github.com/daveleroy/sublime_debugger/commits\n\n\n  Version 0.4.1\n\n  - Adds explicit font setting for debugger panel\n\n\n  Version 0.4.0\n\n  - debugger_configuration replaces debug.configurations and is now defined at the root of the .sublime-project instead of inside settings\n  - Adds support for tasks see https://github.com/daveleroy/sublime_debugger#tasks\n  - Adds support for pre_debug_task and post_debug_task which can be used to build etc\n  - Adds schema support for LSP-json for auto completeing adapter configurations (see https://github.com/sublimelsp/LSP-json)\n  - Improvements to lldb adapter adding toggle disassembly, display options, dereference options\n  - Clicking a terminal panel when already selected now shows an output panel with the entire contents\n  - Renamed a bunch of commands (so if you bound any commands check them)\n  - Node adapter now has snippets\n  - Fixes issues with latest release of lldb adapter\n  - Fixes default ui scale accross platforms\n\n\n  Version 0.3.1\n\n  - Fixes issue with sizing and alignment of panels on windows\n  - Fixes path of go adapter\n\n\n  Version 0.3.0\n\n  - Initial support for multiple debug sessions\n  - Use debugpy instead of ptvsd for python adapter\n  - Right align line numbers in variables/callstack panel\n  - Improved layout of panels\n\n\n  Version 0.2.3\n\n  - Updates path for lldb\n\n\n  Version 0.2.3\n\n  - Updates path for lldb\n\n\n  Version 0.2.2\n\n  - Show dialog with error message when launching fails (to match vscode)\n  - In multi-threaded programs the reason for why a specific thread was stopped is now only displayed on that thread even if all threads were stopped\n  - If running a build with `sublime_build` in the configuration don't start debugging if the build fails with an exit code\n  - Fixes issue with pause not working\n  - Fixes rendering performance regression\n  - Fixes gutter icons on windows\n\n\n  Version 0.2.1\n\n  - Debugging with a single thread now just displays the stack frames without the thread header\n  - When launching a configuration and the adapter is not installed offer to install it\n  - When auto selecting a stack frame prefer the first none subtle stack frame\n  - Fixes call stack layout when encountering long stack frame names\n  - Fixes various issues with multi threaded debugging\n  - Fixes hover providers\n\n\n  Version 0.2.0\n\n  - Support for column breakpoints (requires adapter support)\n  - Support for data breakpoints (requires adapter support, currently only lldb?)\n  - Left-click gutter now toggles breakpoints, right-clicking a breakpoint allows editing/advanced options\n  - Watch expressions\n  - Loaded Modules/Sources panels\n  - Adds Node debug adapter (@appelgriebsch)\n  - External terminal support. Terminal on Mac (Needs support for Windows/Linux) or Sublime's Terminus package.\n  - Integrated terminal now strips ascii control sequences \n  - Settings button\n  - Show currently installed version of an adapter, show download progress when installing an adapter\n  - Fixes issues that sometimes occurred installing/reinstalling adapters\n  - Fixes issues with reloading plugin\n\n\n  Version 0.1.8\n\n  - Fixes core not defined error\n\n\n  Version 0.1.7\n\n  - Allow setting logging options in settings\n  - Updated url for vscode-firefox-debugger (@appelgriebsch)\n  - Fixes issue preventing Debugger: Install Adapters from being run from the command palette\n  - Fixes issue where some debug adapters were failing to be fully unzipped on Windows because of long paths\n\n\n  Version 0.1.6\n\n  - Adds run to cursor command\n  - Fixes issue preventing installing debug adapters\n\n\n  Version 0.1.5\n\n  - Fixes issue that prevented debugging on windows\n\n\n  Version 0.1.4\n\n  - New styling of panels and updated layout to better support temporary panels created for build results/integrated terminal (and in the future allow customizing the layout of the panels)\n  - New console rendering code to support text wrapping and build results/integrated terminal\n  - Support internal terminal requests to allow program input. Requires configuration changes to use this feature which depends on the adapter in question. (LLVM uses \"terminal\": \"integrated\")\n  - Allow defining platform specific configuration settings with a top level object called \"linux\", \"osx\", or \"windows\" in your configuration. Same as vscode \n  - Fixes issue where hover providers/autocomplete/run command was not working for some debug adapters \n  - Fixes issue where using $file and other variables in a configuration had their values expanded when the debugger was opened not when the debugger was started\n  - Fixes some wonkiness that occurred when stepping the debugger that caused it to not update correctly\n\n\n  Version 0.1.3\n\n  - When attempting to open the debugger in a window without a sublime project prompt the user to create one.\n  - Fixes some other minor bugs and configuration issues\n\n\n  Version 0.1.0\n\n  - Adds package control support"
					},
					"IAEAAAAAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAZAAAAAAAAAAAAAAAZAAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAzAAAAAAAAAAAAAAAzAAAAAAAAADsAAAAAAAAAAAAAADsAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAABEAAAAAAAAAAAAAABEAAAAAAAAAEUAAAAAAAAAAAAAAEUAAAAAAAAARgAAAAAAAAAAAAAARgAAAAAAAACMAAAAAAAAAAAAAACMAAAAAAAAAI0AAAAAAAAAAAAAAI0AAAAAAAAAjgAAAAAAAAAAAAAAjgAAAAAAAACPAAAAAAAAAAAAAACPAAAAAAAAAJ4AAAAAAAAAAAAAAJ4AAAAAAAAAnwAAAAAAAAAAAAAAnwAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAANIAAAAAAAAAAAAAANIAAAAAAAAA0wAAAAAAAAAAAAAA0wAAAAAAAAAGAQAAAAAAAAAAAAAGAQAAAAAAAAcBAAAAAAAAAAAAAAcBAAAAAAAAZwEAAAAAAAAAAAAAZwEAAAAAAABoAQAAAAAAAAAAAABoAQAAAAAAAJABAAAAAAAAAAAAAJABAAAAAAAAkQEAAAAAAAAAAAAAkQEAAAAAAADAAQAAAAAAAAAAAADAAQAAAAAAAMEBAAAAAAAAAAAAAMEBAAAAAAAAAwIAAAAAAAAAAAAAAwIAAAAAAAAEAgAAAAAAAAAAAAAEAgAAAAAAADECAAAAAAAAAAAAADECAAAAAAAAMgIAAAAAAAAAAAAAMgIAAAAAAAAzAgAAAAAAAAAAAAAzAgAAAAAAADQCAAAAAAAAAAAAADQCAAAAAAAAQwIAAAAAAAAAAAAAQwIAAAAAAABEAgAAAAAAAAAAAABEAgAAAAAAAEUCAAAAAAAAAAAAAEUCAAAAAAAAhwIAAAAAAAAAAAAAhwIAAAAAAACIAgAAAAAAAAAAAACIAgAAAAAAAIkCAAAAAAAAAAAAAIkCAAAAAAAAigIAAAAAAAAAAAAAigIAAAAAAACZAgAAAAAAAAAAAACZAgAAAAAAAJoCAAAAAAAAAAAAAJoCAAAAAAAAmwIAAAAAAAAAAAAAmwIAAAAAAADbAgAAAAAAAAAAAADbAgAAAAAAANwCAAAAAAAA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AAAAANMLAAAAAAAABgwAAAAAAAAAAAAABgwAAAAAAAAHDAAAAAAAAAAAAAAHDAAAAAAAAEAMAAAAAAAAAAAAAEAMAAAAAAAAQQwAAAAAAAAAAAAAQQwAAAAAAABeDAAAAAAAAAAAAABeDAAAAAAAAF8MAAAAAAAAAAAAAF8MAAAAAAAAYAwAAAAAAAAAAAAAYAwAAAAAAABhDAAAAAAAAAAAAABhDAAAAAAAAHAMAAAAAAAAAAAAAHAMAAAAAAAAcQwAAAAAAAAAAAAAcQwAAAAAAAByDAAAAAAAAAAAAAByDAAAAAAAAIsMAAAAAAAAAAAAAIsMAAAAAAAAjAwAAAAAAAAAAAAAjAwAAAAAAACNDAAAAAAAAAAAAACNDAAAAAAAAI4MAAAAAAAAAAAAAI4MAAAAAAAAnQwAAAAAAAAAAAAAnQwAAAAAAACeDAAAAAAAAAAAAACeDAAAAAAAAJ8MAAAAAAAAAAAAAJ8MAAAAAAAAuAwAAAAAAAAAAAAAuAwAAAAAAAC5DAAAAAAAAAAAAAC5DAAAAAAAALoMAAAAAAAAAAAAALoMAAAAAAAAuwwAAAAAAAAAAAAAuwwAAAAAAADKDAAAAAAAAAAAAADKDAAAAAAAAMsMAAAAAAAAAAAAAMsMAAAAAAAAzAwAAAAAAAAAAAAAzAwAAAAAAAAVDQAAAAAAAAAAAAAVDQAAAAAAABYNAAAAAAAAAAAAABYNAAAAAAAAqw0AAAAAAAAAAAAAqw0AAAAAAACsDQAAAAAAAAAAAACsDQAAAAAAACcOAAAAAAAAAAAAACcOAAAAAAAAKA4AAAAAAAAAAAAAKA4AAAAAAABODgAAAAAAAAAAAABODgAAAAAAAE8OAAAAAAAAAAAAAE8OAAAAAAAAeQ4AAAAAAAAAAAAAeQ4AAAAAAAB6DgAAAAAAAAAAAAB6DgAAAAAAAJsOAAAAAAAAAAAAAJsOAAAAAAAAnA4AAAAAAAAAAAAAnA4AAAAAAACdDgAAAAAAAAAAAACdDgAAAAAAAJ4OAAAAAAAAAAAAAJ4OAAAAAAAArQ4AAAAAAAAAAAAArQ4AAAAAAACuDgAAAAAAAAAAAACuDgAAAAAAAK8OAAAAAAAAAAAAAK8OAAAAAAAADg8AAAAAAAAAAAAADg8AAAAAAAAPDwAAAAAAAAAAAAAPDwAAAAAAAGYPAAAAAAAA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"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"debug",
				"Debugger: Quit"
			],
			[
				"de",
				"Debugger: Open"
			],
			[
				"deb",
				"Debugger: Open"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME6/src/test.sublime-project",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME6/cells/and2.xml",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME6/cells/xor2.xml",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME6/cells/or2.xml",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME6/cells/halfadder.xml",
		"/F/Perso/Scolarite/Master/S1/MOBJ/Outils/libxml2-master/CMakeLists.txt",
		"/F/Perso/Scolarite/Master/S1/MOBJ/libxml2-2.6.30/README",
		"/I/Training_vhdl/controleur_moteur.vhdl",
		"/F/Perso/Scolarite/Master/S1/VLSI/training/fifo_tb.vhdl",
		"/F/Perso/Scolarite/Master/S1/VLSI/TME/TME4/TEST_TME4/ALU_3_tb.vhd",
		"/I/Training_vhdl/controleur_moteur_tb.vhdl",
		"/I/Projet_ARM_CPU/fifo_exam_tb.vhdl",
		"/I/Projet_ARM_CPU/fifo_exam.vhdl",
		"/F/Perso/Scolarite/Master/S1/VLSI/TME/TME3/test1",
		"/F/Perso/Scolarite/Master/S1/VLSI/TME/TME5/Shifter/shifter_tb.vhdl",
		"/F/Perso/Scolarite/Master/S1/VLSI/TME/TME5/util/fifo_72b.vhdl",
		"/F/Perso/Scolarite/Master/S1/VLSI/fifo.vhdl",
		"/F/Perso/Scolarite/Master/S1/VLSI/fifo_tb.vhdl",
		"/F/Perso/Scolarite/Master/S1/VLSI/Makefile",
		"/I/pulse_dac_modulator_amplifier/main.cpp",
		"/F/Perso/Scolarite/Master/S1/VLSI/TME/TME3/arm_sim",
		"/F/Perso/Scolarite/Master/S1/VLSI/data_sheet_inst.txt",
		"/F/Perso/Scolarite/Master/S1/VLSI/data_sheet_condition.txt",
		"/F/Perso/Scolarite/Master/S1/VLSI/projet_conversion_inst.cpp",
		"/F/Perso/Scolarite/Master/S1/VLSI/recuperation_data_sheets.cpp",
		"/F/Perso/Scolarite/Master/S1/VLSI/recuperation_data_sheets",
		"/F/Perso/Scolarite/Master/S1/VLSI/data_sheet",
		"/F/Perso/Scolarite/Master/S1/VLSI/projet_conversion_inst",
		"/C/Users/logeo/OneDrive/Documents/src/Cell.h",
		"/C/Users/logeo/OneDrive/Documents/src/Instance.h",
		"/C/Users/logeo/OneDrive/Documents/src/Term.cpp",
		"/C/Users/logeo/OneDrive/Documents/src/Indentation.h",
		"/F/Perso/Scolarite/Master/S1/VLSI/TME/TME5/util/fifo.vhdl",
		"/F/Perso/Scolarite/Master/S1/VLSI/TME/TME5/EXE/EXE.vhdl",
		"/C/Users/logeo/OneDrive/Bureau/DocNav.lnk",
		"/F/Perso/Scolarite/Master/S1/VLSI/TME/TME4/TEST_TME4/ALU_3.vcd",
		"/F/Perso/Scolarite/Master/S1/VLSI/TME/TME4/ALU/test_tb.vhdl",
		"/F/Perso/Scolarite/Master/S1/VLSI/TME/TME4/ALU/test.vhdl",
		"/F/Perso/Scolarite/Master/S1/VLSI/TME/TME4/ALU/ander.vhdl",
		"/F/Perso/Scolarite/Master/S1/VLSI/TME/TME4/TEST_TME4/ALU_3.vhd",
		"/F/Perso/Scolarite/Master/S1/VLSI/TME/TME4/ALU/ALU_2.vhdl",
		"/F/Perso/Scolarite/Master/S1/VLSI/TME/TME4/adder.vhdl",
		"/F/Perso/Scolarite/Master/S1/VLSI/TME/TME4/ALU/alu_tb",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME4/src/Instance.cpp",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME4/src/Term.cpp",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME4/src/Node.h",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME4/src/Net.h",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME4/src/Point.h",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME4/src/Point.cpp",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME4/src/Node.cpp",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME4/src/Term.h",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME4/src/Cell.cpp",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME4/src/Instance.h",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME4/src/CMakeLists.txt",
		"/F/Perso/Scolarite/Master/S1/VLSI/TME/TME4/ALU/ALU_tb.vhdl",
		"/F/Perso/Scolarite/Master/S1/VLSI/TME/TME4/adder_tb.vhdl",
		"/F/Perso/Scolarite/Master/S1/VLSI/TME/TME4/adder_tb.vhdl.vhdl",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME3/src/GPL_2_text.h",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME3/src/CMakeLists.txt",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME3/src/Timer.h",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME3/src/vector_bench.h",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME3/src/list_bench.h",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME3/src/surcharge_fonctionnel.h",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME3/src/map_sans_surcharge.h",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME3/src/Main.cpp",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME3/src/surcharge_fonctionnelle.h",
		"/F/Perso/Logement/CAF/numero_caf.txt",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME3/src/test.cpp",
		"/F/Perso/Scolarite/Master/S1/MOBJ/CM/CM3/cours_3_mobj9.cpp",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME3/src/map_bench.h",
		"/F/Perso/Scolarite/Master/S1/MOBJ/CM/CM3/cours_3_mobj8.cpp",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME2/src/Box.cpp",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME2/src/Box.h",
		"/F/Perso/Scolarite/Master/Main.cpp",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME2/src/CMakeLists.txt",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME2/src/Main.cpp",
		"/F/Perso/Scolarite/Master/S1/VLSI/CM/cm_3_pgcd.s",
		"/F/Perso/Scolarite/Master/S1/Signal/racines_poly2.cpp",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME2/install/include/Box.h",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME1/build/src/cBox.c",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME1/build/src/cBox.h",
		"/D/Mods_rdr2/ScriptHookNet/README.txt",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME2/src/CmakeLists.txt",
		"/D/Mods_rdr2/ScriptHook2/readme.txt",
		"/D/Mods_rdr2/Trainer/Rampage_1.0.1436.26/README.txt",
		"/F/Perso/Scolarite/Master/S1/ARCHI/TD/TD1/TD1_exo9.s",
		"/F/Perso/Scolarite/Master/S1/ARCHI/TD/TD1/TD1_exo8.s",
		"/F/Perso/Scolarite/Master/S1/ARCHI/TD/TD1/TD1_exo7.s",
		"/F/Perso/Scolarite/Master/S1/ARCHI/TD/TD1/TD1_exo6.s",
		"/F/Perso/Scolarite/Master/S1/ARCHI/TD/TD1/TD1_exo5.s",
		"/D/Mods_rdr2/Trainer/Rampage_1.0.1436.26/Rampage.asi",
		"/D/Red Dead Redemption 2/dinput8.dll",
		"/F/Perso/Scolarite/Master/S1/ARCHI/TD/TD2/TD_2_exo_1.s",
		"/F/Perso/Scolarite/Master/S1/MOBJ/CM/cours_2_mobj.cpp",
		"/F/Perso/Scolarite/Master/S1/MOBJ/cours_1_mobj.cpp",
		"/F/Perso/Scolarite/Master/S1/ARCHI/TD/TD1_exo9.s",
		"/F/Perso/Scolarite/Master/S1/ARCHI/TD/TD1_exo8.s",
		"/F/Perso/Scolarite/Master/S1/ARCHI/TD/TD1_exo7.s",
		"/F/Perso/Scolarite/Master/S1/ARCHI/TD/TD1_exo6.s",
		"/F/Perso/Scolarite/Master/S1/ARCHI/TD/TD1_exo5.s",
		"/F/Perso/Scolarite/Licence/COURS FAC/L3/S2/Projet/code.cpp",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME1/build/src/cMain.c",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME1/build/src/CMakeLists.txt",
		"/F/Perso/Scolarite/Master/S1/ARCHI/TD/TD1_exo1",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME1/src/test/src/cBox.c",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME1/src/CMakeLists.txt",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME1/src/cMain.c",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME1/src/cBox.h",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME1/src/cBox.c",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME1/src/test/cMain.c",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME1/src/test/CMakeLists.txt",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME1/src/test/src/CMakeLists.txt",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME1/src/test/cBox.c",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/TME1/src/test/cBox.h",
		"/F/Perso/Scolarite/Master/S1/MOBJ/cours_1_mobj4.cpp",
		"/F/Perso/Scolarite/Master/S1/MOBJ/cours_1_mobj3.cpp",
		"/F/Perso/Scolarite/Master/S1/MOBJ/TME/cBox.c",
		"/F/Perso/Scolarite/Master/S1/MOBJ/CM/cours_1_mobj.cpp",
		"/F/Perso/Scolarite/Master/S1/MOBJ/cours_1_mobj2.cpp",
		"/F/Perso/Scolarite/Master/S1/MOBJ/CM/cours_1_mobj2.cpp",
		"/F/Perso/Scolarite/Licence/COURS FAC/L3/S1/Physique_num/logistic.cpp",
		"/C/C++_training/nombre_premier.cpp",
		"/C/C++_training/training_1.cpp",
		"/C/C++_training/pokemon_project/dresseur.cpp",
		"/F/Perso/Scolarite/Master/S1/ARCHI/Machine et Représenations/TME/TME3.s",
		"/F/Perso/Scolarite/Master/S1/ARCHI/Machine et Représenations/TME/excep.s",
		"/F/Perso/Scolarite/Master/S1/ARCHI/Machine et Représenations/TME/TME4_1.s",
		"/F/Perso/Scolarite/Licence/COURS FAC/L3/S1/Physique_num/Projet/test.cpp"
	],
	"find":
	{
		"height": 52.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"\\\\"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"//"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Node.h",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1934,
						"regions":
						{
						},
						"selection":
						[
							[
								1654,
								1654
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Term.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3885,
						"regions":
						{
						},
						"selection":
						[
							[
								2013,
								2045
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1053.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Cell.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12218,
						"regions":
						{
						},
						"selection":
						[
							[
								3575,
								3575
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3321.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Cell.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3269,
						"regions":
						{
						},
						"selection":
						[
							[
								461,
								461
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Net.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2201,
						"regions":
						{
						},
						"selection":
						[
							[
								492,
								502
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 356.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Net.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5413,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2681.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Term.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6142,
						"regions":
						{
						},
						"selection":
						[
							[
								5116,
								5115
							],
							[
								5316,
								5315
							],
							[
								5825,
								5824
							],
							[
								5884,
								5883
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2210.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Instance.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2240,
						"regions":
						{
						},
						"selection":
						[
							[
								590,
								594
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 609.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6767,
						"regions":
						{
						},
						"selection":
						[
							[
								18,
								18
							]
						],
						"settings":
						{
							"auto_indent": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"tab_width": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 52.0
	},
	"input":
	{
		"height": 62.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 126.0
	},
	"pinned_build_system": "",
	"project": "test.sublime-project",
	"replace":
	{
		"height": 120.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
